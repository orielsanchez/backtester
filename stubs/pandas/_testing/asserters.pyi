from _typeshed import Incomplete
from pandas import Categorical as Categorical, DataFrame as DataFrame, DatetimeIndex as DatetimeIndex, Index as Index, IntervalDtype as IntervalDtype, IntervalIndex as IntervalIndex, MultiIndex as MultiIndex, PeriodIndex as PeriodIndex, RangeIndex as RangeIndex, Series as Series, TimedeltaIndex as TimedeltaIndex
from pandas._libs import lib as lib
from pandas._libs.missing import is_matching_na as is_matching_na
from pandas._libs.sparse import SparseIndex as SparseIndex
from pandas._libs.tslibs.np_datetime import compare_mismatched_resolutions as compare_mismatched_resolutions
from pandas._typing import DtypeObj as DtypeObj
from pandas.core.arrays import DatetimeArray as DatetimeArray, ExtensionArray as ExtensionArray, IntervalArray as IntervalArray, PeriodArray as PeriodArray, TimedeltaArray as TimedeltaArray
from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin as DatetimeLikeArrayMixin
from pandas.core.arrays.string_ import StringDtype as StringDtype
from pandas.core.dtypes.common import is_bool as is_bool, is_float_dtype as is_float_dtype, is_integer_dtype as is_integer_dtype, is_number as is_number, is_numeric_dtype as is_numeric_dtype, needs_i8_conversion as needs_i8_conversion
from pandas.core.dtypes.dtypes import CategoricalDtype as CategoricalDtype, DatetimeTZDtype as DatetimeTZDtype, ExtensionDtype as ExtensionDtype, NumpyEADtype as NumpyEADtype
from pandas.core.dtypes.missing import array_equivalent as array_equivalent
from pandas.core.indexes.api import safe_sort_index as safe_sort_index
from pandas.io.formats.printing import pprint_thing as pprint_thing
from typing import Literal, NoReturn

def assert_almost_equal(left, right, check_dtype: bool | Literal['equiv'] = 'equiv', rtol: float = 1e-05, atol: float = 1e-08, **kwargs) -> None: ...
def assert_dict_equal(left, right, compare_keys: bool = True) -> None: ...
def assert_index_equal(left: Index, right: Index, exact: bool | str = 'equiv', check_names: bool = True, check_exact: bool = True, check_categorical: bool = True, check_order: bool = True, rtol: float = 1e-05, atol: float = 1e-08, obj: str = 'Index') -> None: ...
def assert_class_equal(left, right, exact: bool | str = True, obj: str = 'Input') -> None: ...
def assert_attr_equal(attr: str, left, right, obj: str = 'Attributes') -> None: ...
def assert_is_valid_plot_return_object(objs) -> None: ...
def assert_is_sorted(seq) -> None: ...
def assert_categorical_equal(left, right, check_dtype: bool = True, check_category_order: bool = True, obj: str = 'Categorical') -> None: ...
def assert_interval_array_equal(left, right, exact: bool | Literal['equiv'] = 'equiv', obj: str = 'IntervalArray') -> None: ...
def assert_period_array_equal(left, right, obj: str = 'PeriodArray') -> None: ...
def assert_datetime_array_equal(left, right, obj: str = 'DatetimeArray', check_freq: bool = True) -> None: ...
def assert_timedelta_array_equal(left, right, obj: str = 'TimedeltaArray', check_freq: bool = True) -> None: ...
def raise_assert_detail(obj, message, left, right, diff: Incomplete | None = None, first_diff: Incomplete | None = None, index_values: Incomplete | None = None) -> NoReturn: ...
def assert_numpy_array_equal(left, right, strict_nan: bool = False, check_dtype: bool | Literal['equiv'] = True, err_msg: Incomplete | None = None, check_same: Incomplete | None = None, obj: str = 'numpy array', index_values: Incomplete | None = None) -> None: ...
def assert_extension_array_equal(left, right, check_dtype: bool | Literal['equiv'] = True, index_values: Incomplete | None = None, check_exact: bool | lib.NoDefault = ..., rtol: float | lib.NoDefault = ..., atol: float | lib.NoDefault = ..., obj: str = 'ExtensionArray') -> None: ...
def assert_series_equal(left, right, check_dtype: bool | Literal['equiv'] = True, check_index_type: bool | Literal['equiv'] = 'equiv', check_series_type: bool = True, check_names: bool = True, check_exact: bool | lib.NoDefault = ..., check_datetimelike_compat: bool = False, check_categorical: bool = True, check_category_order: bool = True, check_freq: bool = True, check_flags: bool = True, rtol: float | lib.NoDefault = ..., atol: float | lib.NoDefault = ..., obj: str = 'Series', *, check_index: bool = True, check_like: bool = False) -> None: ...
def assert_frame_equal(left, right, check_dtype: bool | Literal['equiv'] = True, check_index_type: bool | Literal['equiv'] = 'equiv', check_column_type: bool | Literal['equiv'] = 'equiv', check_frame_type: bool = True, check_names: bool = True, by_blocks: bool = False, check_exact: bool | lib.NoDefault = ..., check_datetimelike_compat: bool = False, check_categorical: bool = True, check_like: bool = False, check_freq: bool = True, check_flags: bool = True, rtol: float | lib.NoDefault = ..., atol: float | lib.NoDefault = ..., obj: str = 'DataFrame') -> None: ...
def assert_equal(left, right, **kwargs) -> None: ...
def assert_sp_array_equal(left, right) -> None: ...
def assert_contains_all(iterable, dic) -> None: ...
def assert_copy(iter1, iter2, **eql_kwargs) -> None: ...
def is_extension_array_dtype_and_needs_i8_conversion(left_dtype: DtypeObj, right_dtype: DtypeObj) -> bool: ...
def assert_indexing_slices_equivalent(ser: Series, l_slc: slice, i_slc: slice) -> None: ...
def assert_metadata_equivalent(left: DataFrame | Series, right: DataFrame | Series | None = None) -> None: ...
