from _typeshed import Incomplete
from collections.abc import Hashable, Iterable, Sequence
from pandas._config import config as config
from pandas._libs import lib as lib
from pandas._libs.parsers import STR_NA_VALUES as STR_NA_VALUES
from pandas._typing import DtypeArg as DtypeArg, DtypeBackend as DtypeBackend, ExcelWriterIfSheetExists as ExcelWriterIfSheetExists, FilePath as FilePath, IntStrT as IntStrT, ReadBuffer as ReadBuffer, Self as Self, SequenceNotStr as SequenceNotStr, StorageOptions as StorageOptions, WriteExcelBuffer as WriteExcelBuffer
from pandas.compat._optional import get_version as get_version, import_optional_dependency as import_optional_dependency
from pandas.core.dtypes.common import is_bool as is_bool, is_float as is_float, is_integer as is_integer, is_list_like as is_list_like
from pandas.core.frame import DataFrame as DataFrame
from pandas.errors import EmptyDataError as EmptyDataError
from pandas.io.common import IOHandles as IOHandles, get_handle as get_handle, stringify_path as stringify_path, validate_header_arg as validate_header_arg
from pandas.io.excel._calamine import CalamineReader as CalamineReader
from pandas.io.excel._odfreader import ODFReader as ODFReader
from pandas.io.excel._openpyxl import OpenpyxlReader as OpenpyxlReader
from pandas.io.excel._pyxlsb import PyxlsbReader as PyxlsbReader
from pandas.io.excel._util import fill_mi_header as fill_mi_header, get_default_engine as get_default_engine, get_writer as get_writer, maybe_convert_usecols as maybe_convert_usecols, pop_header_name as pop_header_name
from pandas.io.excel._xlrd import XlrdReader as XlrdReader
from pandas.io.parsers import TextParser as TextParser
from pandas.io.parsers.readers import validate_integer as validate_integer
from pandas.util._decorators import Appender as Appender, doc as doc
from pandas.util._exceptions import find_stack_level as find_stack_level
from pandas.util._validators import check_dtype_backend as check_dtype_backend
from pandas.util.version import Version as Version
from types import TracebackType
from typing import Any, Callable, Generic, Literal, overload

@overload
def read_excel(io, sheet_name: str | int = ..., *, header: int | Sequence[int] | None = ..., names: SequenceNotStr[Hashable] | range | None = ..., index_col: int | str | Sequence[int] | None = ..., usecols: int | str | Sequence[int] | Sequence[str] | Callable[[str], bool] | None = ..., dtype: DtypeArg | None = ..., engine: Literal['xlrd', 'openpyxl', 'odf', 'pyxlsb', 'calamine'] | None = ..., converters: dict[str, Callable] | dict[int, Callable] | None = ..., true_values: Iterable[Hashable] | None = ..., false_values: Iterable[Hashable] | None = ..., skiprows: Sequence[int] | int | Callable[[int], object] | None = ..., nrows: int | None = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., parse_dates: list | dict | bool = ..., date_parser: Callable | lib.NoDefault = ..., date_format: dict[Hashable, str] | str | None = ..., thousands: str | None = ..., decimal: str = ..., comment: str | None = ..., skipfooter: int = ..., storage_options: StorageOptions = ..., dtype_backend: DtypeBackend | lib.NoDefault = ...) -> DataFrame: ...
@overload
def read_excel(io, sheet_name: list[IntStrT] | None, *, header: int | Sequence[int] | None = ..., names: SequenceNotStr[Hashable] | range | None = ..., index_col: int | str | Sequence[int] | None = ..., usecols: int | str | Sequence[int] | Sequence[str] | Callable[[str], bool] | None = ..., dtype: DtypeArg | None = ..., engine: Literal['xlrd', 'openpyxl', 'odf', 'pyxlsb', 'calamine'] | None = ..., converters: dict[str, Callable] | dict[int, Callable] | None = ..., true_values: Iterable[Hashable] | None = ..., false_values: Iterable[Hashable] | None = ..., skiprows: Sequence[int] | int | Callable[[int], object] | None = ..., nrows: int | None = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., parse_dates: list | dict | bool = ..., date_parser: Callable | lib.NoDefault = ..., date_format: dict[Hashable, str] | str | None = ..., thousands: str | None = ..., decimal: str = ..., comment: str | None = ..., skipfooter: int = ..., storage_options: StorageOptions = ..., dtype_backend: DtypeBackend | lib.NoDefault = ...) -> dict[IntStrT, DataFrame]: ...

class BaseExcelReader(Generic[_WorkbookT]):
    book: _WorkbookT
    handles: Incomplete
    def __init__(self, filepath_or_buffer, storage_options: StorageOptions | None = None, engine_kwargs: dict | None = None) -> None: ...
    def load_workbook(self, filepath_or_buffer, engine_kwargs) -> _WorkbookT: ...
    def close(self) -> None: ...
    @property
    def sheet_names(self) -> list[str]: ...
    def get_sheet_by_name(self, name: str): ...
    def get_sheet_by_index(self, index: int): ...
    def get_sheet_data(self, sheet, rows: int | None = None): ...
    def raise_if_bad_sheet_by_index(self, index: int) -> None: ...
    def raise_if_bad_sheet_by_name(self, name: str) -> None: ...
    def parse(self, sheet_name: str | int | list[int] | list[str] | None = 0, header: int | Sequence[int] | None = 0, names: SequenceNotStr[Hashable] | range | None = None, index_col: int | Sequence[int] | None = None, usecols: Incomplete | None = None, dtype: DtypeArg | None = None, true_values: Iterable[Hashable] | None = None, false_values: Iterable[Hashable] | None = None, skiprows: Sequence[int] | int | Callable[[int], object] | None = None, nrows: int | None = None, na_values: Incomplete | None = None, verbose: bool = False, parse_dates: list | dict | bool = False, date_parser: Callable | lib.NoDefault = ..., date_format: dict[Hashable, str] | str | None = None, thousands: str | None = None, decimal: str = '.', comment: str | None = None, skipfooter: int = 0, dtype_backend: DtypeBackend | lib.NoDefault = ..., **kwds): ...

class ExcelWriter(Generic[_WorkbookT]):
    def __new__(cls, path: FilePath | WriteExcelBuffer | ExcelWriter, engine: str | None = None, date_format: str | None = None, datetime_format: str | None = None, mode: str = 'w', storage_options: StorageOptions | None = None, if_sheet_exists: ExcelWriterIfSheetExists | None = None, engine_kwargs: dict | None = None) -> Self: ...
    @property
    def supported_extensions(self) -> tuple[str, ...]: ...
    @property
    def engine(self) -> str: ...
    @property
    def sheets(self) -> dict[str, Any]: ...
    @property
    def book(self) -> _WorkbookT: ...
    def __init__(self, path: FilePath | WriteExcelBuffer | ExcelWriter, engine: str | None = None, date_format: str | None = None, datetime_format: str | None = None, mode: str = 'w', storage_options: StorageOptions | None = None, if_sheet_exists: ExcelWriterIfSheetExists | None = None, engine_kwargs: dict[str, Any] | None = None) -> None: ...
    @property
    def date_format(self) -> str: ...
    @property
    def datetime_format(self) -> str: ...
    @property
    def if_sheet_exists(self) -> str: ...
    def __fspath__(self) -> str: ...
    @classmethod
    def check_extension(cls, ext: str) -> Literal[True]: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -> None: ...
    def close(self) -> None: ...

XLS_SIGNATURES: Incomplete
ZIP_SIGNATURE: bytes
PEEK_SIZE: Incomplete

def inspect_excel_format(content_or_path: FilePath | ReadBuffer[bytes], storage_options: StorageOptions | None = None) -> str | None: ...

class ExcelFile:
    io: Incomplete
    engine: Incomplete
    storage_options: Incomplete
    def __init__(self, path_or_buffer, engine: str | None = None, storage_options: StorageOptions | None = None, engine_kwargs: dict | None = None) -> None: ...
    def __fspath__(self): ...
    def parse(self, sheet_name: str | int | list[int] | list[str] | None = 0, header: int | Sequence[int] | None = 0, names: SequenceNotStr[Hashable] | range | None = None, index_col: int | Sequence[int] | None = None, usecols: Incomplete | None = None, converters: Incomplete | None = None, true_values: Iterable[Hashable] | None = None, false_values: Iterable[Hashable] | None = None, skiprows: Sequence[int] | int | Callable[[int], object] | None = None, nrows: int | None = None, na_values: Incomplete | None = None, parse_dates: list | dict | bool = False, date_parser: Callable | lib.NoDefault = ..., date_format: str | dict[Hashable, str] | None = None, thousands: str | None = None, comment: str | None = None, skipfooter: int = 0, dtype_backend: DtypeBackend | lib.NoDefault = ..., **kwds) -> DataFrame | dict[str, DataFrame] | dict[int, DataFrame]: ...
    @property
    def book(self): ...
    @property
    def sheet_names(self): ...
    def close(self) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -> None: ...
