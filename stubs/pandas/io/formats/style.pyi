from _typeshed import Incomplete
from collections.abc import Hashable, Sequence
from matplotlib.colors import Colormap as Colormap
from pandas import ExcelWriter as ExcelWriter, IndexSlice as IndexSlice, RangeIndex as RangeIndex
from pandas._config import get_option as get_option
from pandas._typing import Axis as Axis, AxisInt as AxisInt, FilePath as FilePath, IndexLabel as IndexLabel, IntervalClosedType as IntervalClosedType, Level as Level, QuantileInterpolation as QuantileInterpolation, Scalar as Scalar, StorageOptions as StorageOptions, WriteBuffer as WriteBuffer, WriteExcelBuffer as WriteExcelBuffer
from pandas.compat._optional import import_optional_dependency as import_optional_dependency
from pandas.core.frame import DataFrame as DataFrame, Series as Series
from pandas.core.generic import NDFrame as NDFrame
from pandas.io.formats.format import save_to_buffer as save_to_buffer
from pandas.io.formats.style_render import CSSProperties as CSSProperties, CSSStyles as CSSStyles, ExtFormatter as ExtFormatter, StylerRenderer as StylerRenderer, Subset as Subset, Tooltips as Tooltips, format_table_styles as format_table_styles, maybe_convert_css_to_tuples as maybe_convert_css_to_tuples, non_reducing_slice as non_reducing_slice, refactor_levels as refactor_levels
from pandas.util._decorators import Substitution as Substitution, doc as doc
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Any, Callable, overload

jinja2: Incomplete
has_mpl: bool
subset_args: str
properties_args: str
coloring_args: str
buffering_args: str
encoding_args: str

class Styler(StylerRenderer):
    def __init__(self, data: DataFrame | Series, precision: int | None = None, table_styles: CSSStyles | None = None, uuid: str | None = None, caption: str | tuple | list | None = None, table_attributes: str | None = None, cell_ids: bool = True, na_rep: str | None = None, uuid_len: int = 5, decimal: str | None = None, thousands: str | None = None, escape: str | None = None, formatter: ExtFormatter | None = None) -> None: ...
    def concat(self, other: Styler) -> Styler: ...
    tooltips: Incomplete
    def set_tooltips(self, ttips: DataFrame, props: CSSProperties | None = None, css_class: str | None = None) -> Styler: ...
    def to_excel(self, excel_writer: FilePath | WriteExcelBuffer | ExcelWriter, sheet_name: str = 'Sheet1', na_rep: str = '', float_format: str | None = None, columns: Sequence[Hashable] | None = None, header: Sequence[Hashable] | bool = True, index: bool = True, index_label: IndexLabel | None = None, startrow: int = 0, startcol: int = 0, engine: str | None = None, merge_cells: bool = True, encoding: str | None = None, inf_rep: str = 'inf', verbose: bool = True, freeze_panes: tuple[int, int] | None = None, storage_options: StorageOptions | None = None) -> None: ...
    @overload
    def to_latex(self, buf: FilePath | WriteBuffer[str], *, column_format: str | None = ..., position: str | None = ..., position_float: str | None = ..., hrules: bool | None = ..., clines: str | None = ..., label: str | None = ..., caption: str | tuple | None = ..., sparse_index: bool | None = ..., sparse_columns: bool | None = ..., multirow_align: str | None = ..., multicol_align: str | None = ..., siunitx: bool = ..., environment: str | None = ..., encoding: str | None = ..., convert_css: bool = ...) -> None: ...
    @overload
    def to_latex(self, buf: None = ..., *, column_format: str | None = ..., position: str | None = ..., position_float: str | None = ..., hrules: bool | None = ..., clines: str | None = ..., label: str | None = ..., caption: str | tuple | None = ..., sparse_index: bool | None = ..., sparse_columns: bool | None = ..., multirow_align: str | None = ..., multicol_align: str | None = ..., siunitx: bool = ..., environment: str | None = ..., encoding: str | None = ..., convert_css: bool = ...) -> str: ...
    @overload
    def to_html(self, buf: FilePath | WriteBuffer[str], *, table_uuid: str | None = ..., table_attributes: str | None = ..., sparse_index: bool | None = ..., sparse_columns: bool | None = ..., bold_headers: bool = ..., caption: str | None = ..., max_rows: int | None = ..., max_columns: int | None = ..., encoding: str | None = ..., doctype_html: bool = ..., exclude_styles: bool = ..., **kwargs) -> None: ...
    @overload
    def to_html(self, buf: None = ..., *, table_uuid: str | None = ..., table_attributes: str | None = ..., sparse_index: bool | None = ..., sparse_columns: bool | None = ..., bold_headers: bool = ..., caption: str | None = ..., max_rows: int | None = ..., max_columns: int | None = ..., encoding: str | None = ..., doctype_html: bool = ..., exclude_styles: bool = ..., **kwargs) -> str: ...
    @overload
    def to_string(self, buf: FilePath | WriteBuffer[str], *, encoding: str | None = ..., sparse_index: bool | None = ..., sparse_columns: bool | None = ..., max_rows: int | None = ..., max_columns: int | None = ..., delimiter: str = ...) -> None: ...
    @overload
    def to_string(self, buf: None = ..., *, encoding: str | None = ..., sparse_index: bool | None = ..., sparse_columns: bool | None = ..., max_rows: int | None = ..., max_columns: int | None = ..., delimiter: str = ...) -> str: ...
    def set_td_classes(self, classes: DataFrame) -> Styler: ...
    def __copy__(self) -> Styler: ...
    def __deepcopy__(self, memo) -> Styler: ...
    def clear(self) -> None: ...
    def apply(self, func: Callable, axis: Axis | None = 0, subset: Subset | None = None, **kwargs) -> Styler: ...
    def apply_index(self, func: Callable, axis: AxisInt | str = 0, level: Level | list[Level] | None = None, **kwargs) -> Styler: ...
    def map_index(self, func: Callable, axis: AxisInt | str = 0, level: Level | list[Level] | None = None, **kwargs) -> Styler: ...
    def applymap_index(self, func: Callable, axis: AxisInt | str = 0, level: Level | list[Level] | None = None, **kwargs) -> Styler: ...
    def map(self, func: Callable, subset: Subset | None = None, **kwargs) -> Styler: ...
    def applymap(self, func: Callable, subset: Subset | None = None, **kwargs) -> Styler: ...
    table_attributes: Incomplete
    def set_table_attributes(self, attributes: str) -> Styler: ...
    def export(self) -> dict[str, Any]: ...
    hide_index_names: Incomplete
    hide_column_names: Incomplete
    css: Incomplete
    def use(self, styles: dict[str, Any]) -> Styler: ...
    uuid: Incomplete
    def set_uuid(self, uuid: str) -> Styler: ...
    caption: Incomplete
    def set_caption(self, caption: str | tuple | list) -> Styler: ...
    def set_sticky(self, axis: Axis = 0, pixel_size: int | None = None, levels: Level | list[Level] | None = None) -> Styler: ...
    table_styles: Incomplete
    def set_table_styles(self, table_styles: dict[Any, CSSStyles] | CSSStyles | None = None, axis: AxisInt = 0, overwrite: bool = True, css_class_names: dict[str, str] | None = None) -> Styler: ...
    def hide(self, subset: Subset | None = None, axis: Axis = 0, level: Level | list[Level] | None = None, names: bool = False) -> Styler: ...
    def background_gradient(self, cmap: str | Colormap = 'PuBu', low: float = 0, high: float = 0, axis: Axis | None = 0, subset: Subset | None = None, text_color_threshold: float = 0.408, vmin: float | None = None, vmax: float | None = None, gmap: Sequence | None = None) -> Styler: ...
    def text_gradient(self, cmap: str | Colormap = 'PuBu', low: float = 0, high: float = 0, axis: Axis | None = 0, subset: Subset | None = None, vmin: float | None = None, vmax: float | None = None, gmap: Sequence | None = None) -> Styler: ...
    def set_properties(self, subset: Subset | None = None, **kwargs) -> Styler: ...
    def bar(self, subset: Subset | None = None, axis: Axis | None = 0, *, color: str | list | tuple | None = None, cmap: Any | None = None, width: float = 100, height: float = 100, align: str | float | Callable = 'mid', vmin: float | None = None, vmax: float | None = None, props: str = 'width: 10em;') -> Styler: ...
    def highlight_null(self, color: str = 'red', subset: Subset | None = None, props: str | None = None) -> Styler: ...
    def highlight_max(self, subset: Subset | None = None, color: str = 'yellow', axis: Axis | None = 0, props: str | None = None) -> Styler: ...
    def highlight_min(self, subset: Subset | None = None, color: str = 'yellow', axis: Axis | None = 0, props: str | None = None) -> Styler: ...
    def highlight_between(self, subset: Subset | None = None, color: str = 'yellow', axis: Axis | None = 0, left: Scalar | Sequence | None = None, right: Scalar | Sequence | None = None, inclusive: IntervalClosedType = 'both', props: str | None = None) -> Styler: ...
    def highlight_quantile(self, subset: Subset | None = None, color: str = 'yellow', axis: Axis | None = 0, q_left: float = 0.0, q_right: float = 1.0, interpolation: QuantileInterpolation = 'linear', inclusive: IntervalClosedType = 'both', props: str | None = None) -> Styler: ...
    @classmethod
    def from_custom_template(cls, searchpath: Sequence[str], html_table: str | None = None, html_style: str | None = None) -> type[Styler]: ...
    def pipe(self, func: Callable, *args, **kwargs): ...
