from _typeshed import Incomplete
from collections.abc import Iterable, Mapping
from pandas._config import get_option as get_option
from pandas.core.dtypes.inference import is_sequence as is_sequence
from pandas.io.formats.console import get_console_size as get_console_size
from typing import Any, Callable

EscapeChars = Mapping[str, str] | Iterable[str]

def adjoin(space: int, *lists: list[str], **kwargs) -> str: ...
def pprint_thing(thing: Any, _nest_lvl: int = 0, escape_chars: EscapeChars | None = None, default_escapes: bool = False, quote_strings: bool = False, max_seq_items: int | None = None) -> str: ...
def pprint_thing_encoded(object, encoding: str = 'utf-8', errors: str = 'replace') -> bytes: ...
def enable_data_resource_formatter(enable: bool) -> None: ...
def default_pprint(thing: Any, max_seq_items: int | None = None) -> str: ...
def format_object_summary(obj, formatter: Callable, is_justify: bool = True, name: str | None = None, indent_for_name: bool = True, line_break_each_value: bool = False) -> str: ...

class PrettyDict(dict[_KT, _VT]): ...

class _TextAdjustment:
    encoding: Incomplete
    def __init__(self) -> None: ...
    def len(self, text: str) -> int: ...
    def justify(self, texts: Any, max_len: int, mode: str = 'right') -> list[str]: ...
    def adjoin(self, space: int, *lists, **kwargs) -> str: ...

class _EastAsianTextAdjustment(_TextAdjustment):
    ambiguous_width: int
    def __init__(self) -> None: ...
    def len(self, text: str) -> int: ...
    def justify(self, texts: Iterable[str], max_len: int, mode: str = 'right') -> list[str]: ...

def get_adjustment() -> _TextAdjustment: ...
