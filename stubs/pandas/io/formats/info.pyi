import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod
from collections.abc import Iterable, Mapping, Sequence
from pandas import DataFrame as DataFrame, Index as Index, Series as Series
from pandas._config import get_option as get_option
from pandas._typing import Dtype as Dtype, WriteBuffer as WriteBuffer
from pandas.io.formats.printing import pprint_thing as pprint_thing

frame_max_cols_sub: Incomplete
show_counts_sub: Incomplete
frame_examples_sub: Incomplete
frame_see_also_sub: Incomplete
frame_sub_kwargs: Incomplete
series_examples_sub: Incomplete
series_see_also_sub: Incomplete
series_sub_kwargs: Incomplete
INFO_DOCSTRING: Incomplete

class _BaseInfo(ABC, metaclass=abc.ABCMeta):
    data: DataFrame | Series
    memory_usage: bool | str
    @property
    @abstractmethod
    def dtypes(self) -> Iterable[Dtype]: ...
    @property
    @abstractmethod
    def dtype_counts(self) -> Mapping[str, int]: ...
    @property
    @abstractmethod
    def non_null_counts(self) -> Sequence[int]: ...
    @property
    @abstractmethod
    def memory_usage_bytes(self) -> int: ...
    @property
    def memory_usage_string(self) -> str: ...
    @property
    def size_qualifier(self) -> str: ...
    @abstractmethod
    def render(self, *, buf: WriteBuffer[str] | None, max_cols: int | None, verbose: bool | None, show_counts: bool | None) -> None: ...

class DataFrameInfo(_BaseInfo):
    data: DataFrame
    memory_usage: Incomplete
    def __init__(self, data: DataFrame, memory_usage: bool | str | None = None) -> None: ...
    @property
    def dtype_counts(self) -> Mapping[str, int]: ...
    @property
    def dtypes(self) -> Iterable[Dtype]: ...
    @property
    def ids(self) -> Index: ...
    @property
    def col_count(self) -> int: ...
    @property
    def non_null_counts(self) -> Sequence[int]: ...
    @property
    def memory_usage_bytes(self) -> int: ...
    def render(self, *, buf: WriteBuffer[str] | None, max_cols: int | None, verbose: bool | None, show_counts: bool | None) -> None: ...

class SeriesInfo(_BaseInfo):
    data: Series
    memory_usage: Incomplete
    def __init__(self, data: Series, memory_usage: bool | str | None = None) -> None: ...
    def render(self, *, buf: WriteBuffer[str] | None = None, max_cols: int | None = None, verbose: bool | None = None, show_counts: bool | None = None) -> None: ...
    @property
    def non_null_counts(self) -> Sequence[int]: ...
    @property
    def dtypes(self) -> Iterable[Dtype]: ...
    @property
    def dtype_counts(self) -> Mapping[str, int]: ...
    @property
    def memory_usage_bytes(self) -> int: ...

class _InfoPrinterAbstract(metaclass=abc.ABCMeta):
    def to_buffer(self, buf: WriteBuffer[str] | None = None) -> None: ...

class _DataFrameInfoPrinter(_InfoPrinterAbstract):
    info: Incomplete
    data: Incomplete
    verbose: Incomplete
    max_cols: Incomplete
    show_counts: Incomplete
    def __init__(self, info: DataFrameInfo, max_cols: int | None = None, verbose: bool | None = None, show_counts: bool | None = None) -> None: ...
    @property
    def max_rows(self) -> int: ...
    @property
    def exceeds_info_cols(self) -> bool: ...
    @property
    def exceeds_info_rows(self) -> bool: ...
    @property
    def col_count(self) -> int: ...

class _SeriesInfoPrinter(_InfoPrinterAbstract):
    info: Incomplete
    data: Incomplete
    verbose: Incomplete
    show_counts: Incomplete
    def __init__(self, info: SeriesInfo, verbose: bool | None = None, show_counts: bool | None = None) -> None: ...

class _TableBuilderAbstract(ABC, metaclass=abc.ABCMeta):
    info: _BaseInfo
    @abstractmethod
    def get_lines(self) -> list[str]: ...
    @property
    def data(self) -> DataFrame | Series: ...
    @property
    def dtypes(self) -> Iterable[Dtype]: ...
    @property
    def dtype_counts(self) -> Mapping[str, int]: ...
    @property
    def display_memory_usage(self) -> bool: ...
    @property
    def memory_usage_string(self) -> str: ...
    @property
    def non_null_counts(self) -> Sequence[int]: ...
    def add_object_type_line(self) -> None: ...
    def add_index_range_line(self) -> None: ...
    def add_dtypes_line(self) -> None: ...

class _DataFrameTableBuilder(_TableBuilderAbstract, metaclass=abc.ABCMeta):
    info: DataFrameInfo
    def __init__(self, *, info: DataFrameInfo) -> None: ...
    def get_lines(self) -> list[str]: ...
    @property
    def data(self) -> DataFrame: ...
    @property
    def ids(self) -> Index: ...
    @property
    def col_count(self) -> int: ...
    def add_memory_usage_line(self) -> None: ...

class _DataFrameTableBuilderNonVerbose(_DataFrameTableBuilder):
    def add_columns_summary_line(self) -> None: ...

class _TableBuilderVerboseMixin(_TableBuilderAbstract, metaclass=abc.ABCMeta):
    SPACING: str
    strrows: Sequence[Sequence[str]]
    gross_column_widths: Sequence[int]
    with_counts: bool
    @property
    @abstractmethod
    def headers(self) -> Sequence[str]: ...
    @property
    def header_column_widths(self) -> Sequence[int]: ...
    def add_header_line(self) -> None: ...
    def add_separator_line(self) -> None: ...
    def add_body_lines(self) -> None: ...

class _DataFrameTableBuilderVerbose(_DataFrameTableBuilder, _TableBuilderVerboseMixin):
    info: Incomplete
    with_counts: Incomplete
    strrows: Sequence[Sequence[str]]
    gross_column_widths: Sequence[int]
    def __init__(self, *, info: DataFrameInfo, with_counts: bool) -> None: ...
    @property
    def headers(self) -> Sequence[str]: ...
    def add_columns_summary_line(self) -> None: ...

class _SeriesTableBuilder(_TableBuilderAbstract, metaclass=abc.ABCMeta):
    info: SeriesInfo
    def __init__(self, *, info: SeriesInfo) -> None: ...
    def get_lines(self) -> list[str]: ...
    @property
    def data(self) -> Series: ...
    def add_memory_usage_line(self) -> None: ...

class _SeriesTableBuilderNonVerbose(_SeriesTableBuilder): ...

class _SeriesTableBuilderVerbose(_SeriesTableBuilder, _TableBuilderVerboseMixin):
    info: Incomplete
    with_counts: Incomplete
    strrows: Sequence[Sequence[str]]
    gross_column_widths: Sequence[int]
    def __init__(self, *, info: SeriesInfo, with_counts: bool) -> None: ...
    def add_series_name_line(self) -> None: ...
    @property
    def headers(self) -> Sequence[str]: ...
