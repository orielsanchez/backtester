from _typeshed import Incomplete
from typing import Callable, NamedTuple

__all__ = ['parse', 'Version', 'LegacyVersion', 'InvalidVersion', 'VERSION_PATTERN']

class InfinityType:
    def __hash__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __neg__(self) -> NegativeInfinityType: ...

class NegativeInfinityType:
    def __hash__(self) -> int: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __neg__(self) -> InfinityType: ...
InfiniteTypes = InfinityType | NegativeInfinityType
PrePostDevType = InfiniteTypes | tuple[str, int]
SubLocalType = InfiniteTypes | int | str
LocalType = NegativeInfinityType | tuple[SubLocalType | tuple[SubLocalType, str] | tuple[NegativeInfinityType, SubLocalType], ...]
CmpKey = tuple[int, tuple[int, ...], PrePostDevType, PrePostDevType, PrePostDevType, LocalType]
LegacyCmpKey = tuple[int, tuple[str, ...]]
VersionComparisonMethod = Callable[[CmpKey | LegacyCmpKey, CmpKey | LegacyCmpKey], bool]

class _Version(NamedTuple):
    epoch: Incomplete
    release: Incomplete
    dev: Incomplete
    pre: Incomplete
    post: Incomplete
    local: Incomplete

def parse(version: str) -> LegacyVersion | Version: ...

class InvalidVersion(ValueError): ...

class _BaseVersion:
    def __hash__(self) -> int: ...
    def __lt__(self, other: _BaseVersion) -> bool: ...
    def __le__(self, other: _BaseVersion) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: _BaseVersion) -> bool: ...
    def __gt__(self, other: _BaseVersion) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class LegacyVersion(_BaseVersion):
    def __init__(self, version: str) -> None: ...
    @property
    def public(self) -> str: ...
    @property
    def base_version(self) -> str: ...
    @property
    def epoch(self) -> int: ...
    @property
    def release(self) -> None: ...
    @property
    def pre(self) -> None: ...
    @property
    def post(self) -> None: ...
    @property
    def dev(self) -> None: ...
    @property
    def local(self) -> None: ...
    @property
    def is_prerelease(self) -> bool: ...
    @property
    def is_postrelease(self) -> bool: ...
    @property
    def is_devrelease(self) -> bool: ...

VERSION_PATTERN: str

class Version(_BaseVersion):
    def __init__(self, version: str) -> None: ...
    @property
    def epoch(self) -> int: ...
    @property
    def release(self) -> tuple[int, ...]: ...
    @property
    def pre(self) -> tuple[str, int] | None: ...
    @property
    def post(self) -> int | None: ...
    @property
    def dev(self) -> int | None: ...
    @property
    def local(self) -> str | None: ...
    @property
    def public(self) -> str: ...
    @property
    def base_version(self) -> str: ...
    @property
    def is_prerelease(self) -> bool: ...
    @property
    def is_postrelease(self) -> bool: ...
    @property
    def is_devrelease(self) -> bool: ...
    @property
    def major(self) -> int: ...
    @property
    def minor(self) -> int: ...
    @property
    def micro(self) -> int: ...
