import numpy as np
from collections.abc import Iterable, Sequence
from pandas._libs import lib as lib
from pandas.core.dtypes.common import is_bool as is_bool, is_integer as is_integer
from typing import TypeVar, overload

BoolishT = TypeVar('BoolishT', bool, int)
BoolishNoneT = TypeVar('BoolishNoneT', bool, int, None)

def validate_args(fname, args, max_fname_arg_count, compat_args) -> None: ...
def validate_kwargs(fname, kwargs, compat_args) -> None: ...
def validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args) -> None: ...
def validate_bool_kwarg(value: BoolishNoneT, arg_name: str, none_allowed: bool = True, int_allowed: bool = False) -> BoolishNoneT: ...
def validate_fillna_kwargs(value, method, validate_scalar_dict_value: bool = True): ...
def validate_percentile(q: float | Iterable[float]) -> np.ndarray: ...
@overload
def validate_ascending(ascending: BoolishT) -> BoolishT: ...
@overload
def validate_ascending(ascending: Sequence[BoolishT]) -> list[BoolishT]: ...
def validate_endpoints(closed: str | None) -> tuple[bool, bool]: ...
def validate_inclusive(inclusive: str | None) -> tuple[bool, bool]: ...
def validate_insert_loc(loc: int, length: int) -> int: ...
def check_dtype_backend(dtype_backend) -> None: ...
