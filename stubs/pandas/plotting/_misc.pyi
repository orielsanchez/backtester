import numpy as np
from _typeshed import Incomplete
from collections.abc import Generator, Mapping
from matplotlib.axes import Axes as Axes
from matplotlib.colors import Colormap as Colormap
from matplotlib.figure import Figure as Figure
from matplotlib.table import Table as Table
from pandas import DataFrame as DataFrame, Series as Series
from typing import Any

def table(ax: Axes, data: DataFrame | Series, **kwargs) -> Table: ...
def register() -> None: ...
def deregister() -> None: ...
def scatter_matrix(frame: DataFrame, alpha: float = 0.5, figsize: tuple[float, float] | None = None, ax: Axes | None = None, grid: bool = False, diagonal: str = 'hist', marker: str = '.', density_kwds: Mapping[str, Any] | None = None, hist_kwds: Mapping[str, Any] | None = None, range_padding: float = 0.05, **kwargs) -> np.ndarray: ...
def radviz(frame: DataFrame, class_column: str, ax: Axes | None = None, color: list[str] | tuple[str, ...] | None = None, colormap: Colormap | str | None = None, **kwds) -> Axes: ...
def andrews_curves(frame: DataFrame, class_column: str, ax: Axes | None = None, samples: int = 200, color: list[str] | tuple[str, ...] | None = None, colormap: Colormap | str | None = None, **kwargs) -> Axes: ...
def bootstrap_plot(series: Series, fig: Figure | None = None, size: int = 50, samples: int = 500, **kwds) -> Figure: ...
def parallel_coordinates(frame: DataFrame, class_column: str, cols: list[str] | None = None, ax: Axes | None = None, color: list[str] | tuple[str, ...] | None = None, use_columns: bool = False, xticks: list | tuple | None = None, colormap: Colormap | str | None = None, axvlines: bool = True, axvlines_kwds: Mapping[str, Any] | None = None, sort_labels: bool = False, **kwargs) -> Axes: ...
def lag_plot(series: Series, lag: int = 1, ax: Axes | None = None, **kwds) -> Axes: ...
def autocorrelation_plot(series: Series, ax: Axes | None = None, **kwargs) -> Axes: ...

class _Options(dict):
    def __init__(self, deprecated: bool = False) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __contains__(self, key) -> bool: ...
    def reset(self) -> None: ...
    def use(self, key, value) -> Generator[_Options, None, None]: ...

plot_params: Incomplete
