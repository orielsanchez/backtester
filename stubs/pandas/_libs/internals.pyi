import _cython_3_0_11
from _typeshed import Incomplete
from pandas._libs.algos import ensure_int64 as ensure_int64
from typing import ClassVar

__reduce_cython__: _cython_3_0_11.cython_function_or_method
__setstate_cython__: _cython_3_0_11.cython_function_or_method
__test__: dict
get_blkno_indexers: _cython_3_0_11.cython_function_or_method
get_blkno_placements: _cython_3_0_11.cython_function_or_method
get_concat_blkno_indexers: _cython_3_0_11.cython_function_or_method
slice_len: _cython_3_0_11.cython_function_or_method
update_blklocs_and_blknos: _cython_3_0_11.cython_function_or_method

class Block:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    ndim: Incomplete
    refs: Incomplete
    values: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def slice_block_rows(self, *args, **kwargs): ...
    def __reduce__(self): ...

class BlockManager:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    axes: Incomplete
    blocks: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def get_slice(self, *args, **kwargs): ...
    def __reduce__(self): ...

class BlockPlacement:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    as_array: Incomplete
    as_slice: Incomplete
    indexer: Incomplete
    is_slice_like: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def add(self, *args, **kwargs): ...
    def append(self, *args, **kwargs): ...
    def delete(self, *args, **kwargs): ...
    def increment_above(self, *args, **kwargs): ...
    def tile_for_unstack(self, *args, **kwargs): ...
    def __getitem__(self, index): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class BlockValuesRefs:
    clear_counter: Incomplete
    referenced_blocks: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def add_index_reference(self, *args, **kwargs): ...
    def add_reference(self, *args, **kwargs): ...
    def has_reference(self, *args, **kwargs): ...
    def __reduce__(self): ...
