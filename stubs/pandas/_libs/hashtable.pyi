import _cython_3_0_11
from _typeshed import Incomplete
from typing import ClassVar

SIZE_HINT_LIMIT: int
__reduce_cython__: _cython_3_0_11.cython_function_or_method
__setstate_cython__: _cython_3_0_11.cython_function_or_method
__test__: dict
duplicated: _cython_3_0_11.fused_cython_function
get_hashtable_trace_domain: _cython_3_0_11.cython_function_or_method
ismember: _cython_3_0_11.fused_cython_function
mode: _cython_3_0_11.fused_cython_function
object_hash: _cython_3_0_11.cython_function_or_method
objects_are_equal: _cython_3_0_11.cython_function_or_method
unique_label_indices: _cython_3_0_11.cython_function_or_method
value_count: _cython_3_0_11.fused_cython_function

class Complex128Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Complex128HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Complex128Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Complex64Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Complex64HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Complex64Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Factorizer:
    count: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_count(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Float32Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Float32HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Float32Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Float64Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Float64HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Float64Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class HashTable:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Int16Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Int16HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Int16Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Int32Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Int32HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Int32Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Int64Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Int64HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_labels_groupby(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_keys_to_values(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Int64Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Int8Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class Int8HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Int8Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class IntpHashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_labels_groupby(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_keys_to_values(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class ObjectFactorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class ObjectVector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class PyObjectHashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class StringHashTable(HashTable):
    na_string_sentinel: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_indexer(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __reduce__(self): ...

class StringVector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class UInt16Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class UInt16HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class UInt16Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class UInt32Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class UInt32HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class UInt32Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class UInt64Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class UInt64HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class UInt64Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class UInt8Factorizer(Factorizer):
    table: Incomplete
    uniques: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def __reduce__(self): ...

class UInt8HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs): ...
    def get_item(self, *args, **kwargs): ...
    def get_labels(self, *args, **kwargs): ...
    def get_na(self, *args, **kwargs): ...
    def get_state(self, *args, **kwargs): ...
    def lookup(self, *args, **kwargs): ...
    def map_locations(self, *args, **kwargs): ...
    def set_item(self, *args, **kwargs): ...
    def set_na(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs): ...
    def unique(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class UInt8Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs): ...
    def __len__(self) -> int: ...
    def __reduce__(self): ...

class Vector:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...
