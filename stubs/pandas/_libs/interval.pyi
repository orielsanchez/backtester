import _cython_3_0_11
from _typeshed import Incomplete
from pandas._libs.algos import is_monotonic as is_monotonic
from typing import Any, ClassVar, overload

NODE_CLASSES: dict
VALID_CLOSED: frozenset
__test__: dict
intervals_to_interval_bounds: _cython_3_0_11.cython_function_or_method

class Interval(IntervalMixin):
    _typ: ClassVar[str] = ...
    __array_priority__: ClassVar[int] = ...
    closed: Incomplete
    left: Incomplete
    right: Incomplete
    @overload
    def __init__(self, left=..., right=...) -> Any: ...
    @overload
    def __init__(self, left=..., right=..., closed=...) -> Any: ...
    @overload
    def overlaps(self, i2) -> Any: ...
    @overload
    def overlaps(self, i3) -> Any: ...
    @overload
    def overlaps(self, i5) -> Any: ...
    @overload
    def overlaps(self, i6) -> Any: ...
    def __add__(self, other): ...
    def __contains__(self, other) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __floordiv__(self, other): ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other): ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other): ...
    def __reduce__(self): ...
    def __rfloordiv__(self, other): ...
    def __rmul__(self, other): ...
    def __rsub__(self, other): ...
    def __rtruediv__(self, other): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...

class IntervalMixin:
    closed_left: Incomplete
    closed_right: Incomplete
    is_empty: Incomplete
    length: Incomplete
    mid: Incomplete
    open_left: Incomplete
    open_right: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class IntervalTree(IntervalMixin):
    closed: Incomplete
    dtype: Incomplete
    is_monotonic_increasing: Incomplete
    is_overlapping: Incomplete
    left: Incomplete
    left_sorter: Incomplete
    right: Incomplete
    right_sorter: Incomplete
    root: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def clear_mapping(self, *args, **kwargs): ...
    def get_indexer(self, *args, **kwargs): ...
    def get_indexer_non_unique(self, *args, **kwargs): ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...
