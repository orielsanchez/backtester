import numpy as np
from _typeshed import Incomplete
from pandas import Index as Index
from pandas._libs import NaT as NaT, algos as algos, lib as lib
from pandas._typing import ArrayLike as ArrayLike, AxisInt as AxisInt, F as F, ReindexMethod as ReindexMethod, npt as npt
from pandas.compat._optional import import_optional_dependency as import_optional_dependency
from pandas.core.dtypes.cast import infer_dtype_from as infer_dtype_from
from pandas.core.dtypes.common import is_array_like as is_array_like, is_bool_dtype as is_bool_dtype, is_numeric_dtype as is_numeric_dtype, is_numeric_v_string_like as is_numeric_v_string_like, is_object_dtype as is_object_dtype, needs_i8_conversion as needs_i8_conversion
from pandas.core.dtypes.dtypes import DatetimeTZDtype as DatetimeTZDtype
from pandas.core.dtypes.missing import is_valid_na_for_dtype as is_valid_na_for_dtype, isna as isna, na_value_for_dtype as na_value_for_dtype
from typing import Any, Literal, overload

def check_value_size(value, mask: npt.NDArray[np.bool_], length: int): ...
def mask_missing(arr: ArrayLike, values_to_mask) -> npt.NDArray[np.bool_]: ...
@overload
def clean_fill_method(method: Literal['ffill', 'pad', 'bfill', 'backfill'], *, allow_nearest: Literal[False] = ...) -> Literal['pad', 'backfill']: ...
@overload
def clean_fill_method(method: Literal['ffill', 'pad', 'bfill', 'backfill', 'nearest'], *, allow_nearest: Literal[True]) -> Literal['pad', 'backfill', 'nearest']: ...

NP_METHODS: Incomplete
SP_METHODS: Incomplete

def clean_interp_method(method: str, index: Index, **kwargs) -> str: ...
def find_valid_index(how: str, is_valid: npt.NDArray[np.bool_]) -> int | None: ...
def validate_limit_direction(limit_direction: str) -> Literal['forward', 'backward', 'both']: ...
def validate_limit_area(limit_area: str | None) -> Literal['inside', 'outside'] | None: ...
def infer_limit_direction(limit_direction: Literal['backward', 'forward', 'both'] | None, method: str) -> Literal['backward', 'forward', 'both']: ...
def get_interp_index(method, index: Index) -> Index: ...
def interpolate_2d_inplace(data: np.ndarray, index: Index, axis: AxisInt, method: str = 'linear', limit: int | None = None, limit_direction: str = 'forward', limit_area: str | None = None, fill_value: Any | None = None, mask: Incomplete | None = None, **kwargs) -> None: ...
def pad_or_backfill_inplace(values: np.ndarray, method: Literal['pad', 'backfill'] = 'pad', axis: AxisInt = 0, limit: int | None = None, limit_area: Literal['inside', 'outside'] | None = None) -> None: ...
def get_fill_func(method, ndim: int = 1): ...
def clean_reindex_fill_method(method) -> ReindexMethod | None: ...
