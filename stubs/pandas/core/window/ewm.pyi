import numpy as np
from _typeshed import Incomplete
from pandas import DataFrame as DataFrame, Series as Series
from pandas._libs.tslibs import Timedelta as Timedelta
from pandas._typing import Axis as Axis, TimedeltaConvertibleTypes as TimedeltaConvertibleTypes, npt as npt
from pandas.core import common as common
from pandas.core.arrays.datetimelike import dtype_to_unit as dtype_to_unit
from pandas.core.dtypes.common import is_datetime64_dtype as is_datetime64_dtype, is_numeric_dtype as is_numeric_dtype
from pandas.core.dtypes.dtypes import DatetimeTZDtype as DatetimeTZDtype
from pandas.core.dtypes.generic import ABCSeries as ABCSeries
from pandas.core.dtypes.missing import isna as isna
from pandas.core.generic import NDFrame as NDFrame
from pandas.core.indexers.objects import BaseIndexer as BaseIndexer, ExponentialMovingWindowIndexer as ExponentialMovingWindowIndexer, GroupbyIndexer as GroupbyIndexer
from pandas.core.util.numba_ import get_jit_arguments as get_jit_arguments, maybe_use_numba as maybe_use_numba
from pandas.core.window.common import zsqrt as zsqrt
from pandas.core.window.doc import create_section_header as create_section_header, kwargs_numeric_only as kwargs_numeric_only, numba_notes as numba_notes, template_header as template_header, template_returns as template_returns, template_see_also as template_see_also, window_agg_numba_parameters as window_agg_numba_parameters
from pandas.core.window.numba_ import generate_numba_ewm_func as generate_numba_ewm_func, generate_numba_ewm_table_func as generate_numba_ewm_table_func
from pandas.core.window.online import EWMMeanState as EWMMeanState, generate_online_numba_ewma_func as generate_online_numba_ewma_func
from pandas.core.window.rolling import BaseWindow as BaseWindow, BaseWindowGroupby as BaseWindowGroupby
from pandas.util._decorators import doc as doc

def get_center_of_mass(comass: float | None, span: float | None, halflife: float | None, alpha: float | None) -> float: ...

class ExponentialMovingWindow(BaseWindow):
    com: Incomplete
    span: Incomplete
    halflife: Incomplete
    alpha: Incomplete
    adjust: Incomplete
    ignore_na: Incomplete
    times: Incomplete
    def __init__(self, obj: NDFrame, com: float | None = None, span: float | None = None, halflife: float | TimedeltaConvertibleTypes | None = None, alpha: float | None = None, min_periods: int | None = 0, adjust: bool = True, ignore_na: bool = False, axis: Axis = 0, times: np.ndarray | NDFrame | None = None, method: str = 'single', *, selection: Incomplete | None = None) -> None: ...
    def online(self, engine: str = 'numba', engine_kwargs: Incomplete | None = None) -> OnlineExponentialMovingWindow: ...
    def aggregate(self, func, *args, **kwargs): ...
    agg = aggregate
    def mean(self, numeric_only: bool = False, engine: Incomplete | None = None, engine_kwargs: Incomplete | None = None): ...
    def sum(self, numeric_only: bool = False, engine: Incomplete | None = None, engine_kwargs: Incomplete | None = None): ...
    def std(self, bias: bool = False, numeric_only: bool = False): ...
    def var(self, bias: bool = False, numeric_only: bool = False): ...
    def cov(self, other: DataFrame | Series | None = None, pairwise: bool | None = None, bias: bool = False, numeric_only: bool = False): ...
    def corr(self, other: DataFrame | Series | None = None, pairwise: bool | None = None, numeric_only: bool = False): ...

class ExponentialMovingWindowGroupby(BaseWindowGroupby, ExponentialMovingWindow):
    def __init__(self, obj, *args, _grouper: Incomplete | None = None, **kwargs) -> None: ...

class OnlineExponentialMovingWindow(ExponentialMovingWindow):
    engine: Incomplete
    engine_kwargs: Incomplete
    def __init__(self, obj: NDFrame, com: float | None = None, span: float | None = None, halflife: float | TimedeltaConvertibleTypes | None = None, alpha: float | None = None, min_periods: int | None = 0, adjust: bool = True, ignore_na: bool = False, axis: Axis = 0, times: np.ndarray | NDFrame | None = None, engine: str = 'numba', engine_kwargs: dict[str, bool] | None = None, *, selection: Incomplete | None = None) -> None: ...
    def reset(self) -> None: ...
    def aggregate(self, func, *args, **kwargs) -> None: ...
    def std(self, bias: bool = False, *args, **kwargs): ...
    def corr(self, other: DataFrame | Series | None = None, pairwise: bool | None = None, numeric_only: bool = False): ...
    def cov(self, other: DataFrame | Series | None = None, pairwise: bool | None = None, bias: bool = False, numeric_only: bool = False): ...
    def var(self, bias: bool = False, numeric_only: bool = False): ...
    def mean(self, *args, update: Incomplete | None = None, update_times: Incomplete | None = None, **kwargs): ...
