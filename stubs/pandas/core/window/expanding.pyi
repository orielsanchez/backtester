from _typeshed import Incomplete
from pandas import DataFrame as DataFrame, Series as Series
from pandas._typing import Axis as Axis, QuantileInterpolation as QuantileInterpolation, WindowingRankType as WindowingRankType
from pandas.core.generic import NDFrame as NDFrame
from pandas.core.indexers.objects import BaseIndexer as BaseIndexer, ExpandingIndexer as ExpandingIndexer, GroupbyIndexer as GroupbyIndexer
from pandas.core.window.doc import create_section_header as create_section_header, kwargs_numeric_only as kwargs_numeric_only, numba_notes as numba_notes, template_header as template_header, template_returns as template_returns, template_see_also as template_see_also, window_agg_numba_parameters as window_agg_numba_parameters, window_apply_parameters as window_apply_parameters
from pandas.core.window.rolling import BaseWindowGroupby as BaseWindowGroupby, RollingAndExpandingMixin as RollingAndExpandingMixin
from pandas.util._decorators import deprecate_kwarg as deprecate_kwarg, doc as doc
from typing import Any, Callable, Literal

class Expanding(RollingAndExpandingMixin):
    def __init__(self, obj: NDFrame, min_periods: int = 1, axis: Axis = 0, method: str = 'single', selection: Incomplete | None = None) -> None: ...
    def aggregate(self, func, *args, **kwargs): ...
    agg = aggregate
    def count(self, numeric_only: bool = False): ...
    def apply(self, func: Callable[..., Any], raw: bool = False, engine: Literal['cython', 'numba'] | None = None, engine_kwargs: dict[str, bool] | None = None, args: tuple[Any, ...] | None = None, kwargs: dict[str, Any] | None = None): ...
    def sum(self, numeric_only: bool = False, engine: Literal['cython', 'numba'] | None = None, engine_kwargs: dict[str, bool] | None = None): ...
    def max(self, numeric_only: bool = False, engine: Literal['cython', 'numba'] | None = None, engine_kwargs: dict[str, bool] | None = None): ...
    def min(self, numeric_only: bool = False, engine: Literal['cython', 'numba'] | None = None, engine_kwargs: dict[str, bool] | None = None): ...
    def mean(self, numeric_only: bool = False, engine: Literal['cython', 'numba'] | None = None, engine_kwargs: dict[str, bool] | None = None): ...
    def median(self, numeric_only: bool = False, engine: Literal['cython', 'numba'] | None = None, engine_kwargs: dict[str, bool] | None = None): ...
    def std(self, ddof: int = 1, numeric_only: bool = False, engine: Literal['cython', 'numba'] | None = None, engine_kwargs: dict[str, bool] | None = None): ...
    def var(self, ddof: int = 1, numeric_only: bool = False, engine: Literal['cython', 'numba'] | None = None, engine_kwargs: dict[str, bool] | None = None): ...
    def sem(self, ddof: int = 1, numeric_only: bool = False): ...
    def skew(self, numeric_only: bool = False): ...
    def kurt(self, numeric_only: bool = False): ...
    def quantile(self, q: float, interpolation: QuantileInterpolation = 'linear', numeric_only: bool = False): ...
    def rank(self, method: WindowingRankType = 'average', ascending: bool = True, pct: bool = False, numeric_only: bool = False): ...
    def cov(self, other: DataFrame | Series | None = None, pairwise: bool | None = None, ddof: int = 1, numeric_only: bool = False): ...
    def corr(self, other: DataFrame | Series | None = None, pairwise: bool | None = None, ddof: int = 1, numeric_only: bool = False): ...

class ExpandingGroupby(BaseWindowGroupby, Expanding): ...
