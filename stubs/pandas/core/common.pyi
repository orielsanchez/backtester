import numpy as np
from _typeshed import Incomplete
from collections.abc import Collection, Generator, Hashable, Iterable, Sequence
from pandas import Index as Index
from pandas._libs import lib as lib
from pandas._typing import AnyArrayLike as AnyArrayLike, ArrayLike as ArrayLike, NpDtype as NpDtype, RandomState as RandomState, T as T
from pandas.compat.numpy import np_version_gte1p24 as np_version_gte1p24
from pandas.core.dtypes.cast import construct_1d_object_array_from_listlike as construct_1d_object_array_from_listlike
from pandas.core.dtypes.common import is_bool_dtype as is_bool_dtype, is_integer as is_integer
from pandas.core.dtypes.generic import ABCExtensionArray as ABCExtensionArray, ABCIndex as ABCIndex, ABCMultiIndex as ABCMultiIndex, ABCSeries as ABCSeries
from pandas.core.dtypes.inference import iterable_not_string as iterable_not_string
from typing import Any, Callable, overload

def flatten(line) -> Generator[Incomplete, Incomplete]: ...
def consensus_name_attr(objs): ...
def is_bool_indexer(key: Any) -> bool: ...
def cast_scalar_indexer(val): ...
def not_none(*args): ...
def any_none(*args) -> bool: ...
def all_none(*args) -> bool: ...
def any_not_none(*args) -> bool: ...
def all_not_none(*args) -> bool: ...
def count_not_none(*args) -> int: ...
@overload
def asarray_tuplesafe(values: ArrayLike | list | tuple | zip, dtype: NpDtype | None = ...) -> np.ndarray: ...
@overload
def asarray_tuplesafe(values: Iterable, dtype: NpDtype | None = ...) -> ArrayLike: ...
def index_labels_to_array(labels: np.ndarray | Iterable, dtype: NpDtype | None = None) -> np.ndarray: ...
def maybe_make_list(obj): ...
def maybe_iterable_to_list(obj: Iterable[T] | T) -> Collection[T] | T: ...
def is_null_slice(obj) -> bool: ...
def is_empty_slice(obj) -> bool: ...
def is_true_slices(line) -> list[bool]: ...
def is_full_slice(obj, line: int) -> bool: ...
def get_callable_name(obj): ...
def apply_if_callable(maybe_callable, obj, **kwargs): ...
def standardize_mapping(into): ...
@overload
def random_state(state: np.random.Generator) -> np.random.Generator: ...
@overload
def random_state(state: int | np.ndarray | np.random.BitGenerator | np.random.RandomState | None) -> np.random.RandomState: ...
def pipe(obj, func: Callable[..., T] | tuple[Callable[..., T], str], *args, **kwargs) -> T: ...
def get_rename_function(mapper): ...
def convert_to_list_like(values: Hashable | Iterable | AnyArrayLike) -> list | AnyArrayLike: ...
def temp_setattr(obj, attr: str, value, condition: bool = True) -> Generator[None, None, None]: ...
def require_length_match(data, index: Index) -> None: ...
def get_cython_func(arg: Callable) -> str | None: ...
def is_builtin_func(arg): ...
def fill_missing_names(names: Sequence[Hashable | None]) -> list[Hashable]: ...
