import numpy as np
import re
from _typeshed import Incomplete
from collections.abc import Iterator
from pandas import DataFrame as DataFrame, Index as Index, Series as Series
from pandas._libs import lib as lib
from pandas._typing import AlignJoin as AlignJoin, DtypeObj as DtypeObj, F as F, Scalar as Scalar, npt as npt
from pandas.core.arrays import ExtensionArray as ExtensionArray
from pandas.core.base import NoNewAttributesMixin as NoNewAttributesMixin
from pandas.core.construction import extract_array as extract_array
from pandas.core.dtypes.common import ensure_object as ensure_object, is_bool_dtype as is_bool_dtype, is_integer as is_integer, is_list_like as is_list_like, is_object_dtype as is_object_dtype, is_re as is_re
from pandas.core.dtypes.dtypes import ArrowDtype as ArrowDtype, CategoricalDtype as CategoricalDtype
from pandas.core.dtypes.generic import ABCDataFrame as ABCDataFrame, ABCIndex as ABCIndex, ABCMultiIndex as ABCMultiIndex, ABCSeries as ABCSeries
from pandas.core.dtypes.missing import isna as isna
from pandas.util._decorators import Appender as Appender
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Callable, Literal

def forbid_nonstring_types(forbidden: list[str] | None, name: str | None = None) -> Callable[[F], F]: ...

class StringMethods(NoNewAttributesMixin):
    def __init__(self, data) -> None: ...
    def __getitem__(self, key): ...
    def __iter__(self) -> Iterator: ...
    def cat(self, others: Incomplete | None = None, sep: str | None = None, na_rep: Incomplete | None = None, join: AlignJoin = 'left') -> str | Series | Index: ...
    def split(self, pat: str | re.Pattern | None = None, *, n: int = -1, expand: bool = False, regex: bool | None = None): ...
    def rsplit(self, pat: Incomplete | None = None, *, n: int = -1, expand: bool = False): ...
    def partition(self, sep: str = ' ', expand: bool = True): ...
    def rpartition(self, sep: str = ' ', expand: bool = True): ...
    def get(self, i): ...
    def join(self, sep: str): ...
    def contains(self, pat, case: bool = True, flags: int = 0, na: Incomplete | None = None, regex: bool = True): ...
    def match(self, pat: str, case: bool = True, flags: int = 0, na: Incomplete | None = None): ...
    def fullmatch(self, pat, case: bool = True, flags: int = 0, na: Incomplete | None = None): ...
    def replace(self, pat: str | re.Pattern, repl: str | Callable, n: int = -1, case: bool | None = None, flags: int = 0, regex: bool = False): ...
    def repeat(self, repeats): ...
    def pad(self, width: int, side: Literal['left', 'right', 'both'] = 'left', fillchar: str = ' '): ...
    def center(self, width: int, fillchar: str = ' '): ...
    def ljust(self, width: int, fillchar: str = ' '): ...
    def rjust(self, width: int, fillchar: str = ' '): ...
    def zfill(self, width: int): ...
    def slice(self, start: Incomplete | None = None, stop: Incomplete | None = None, step: Incomplete | None = None): ...
    def slice_replace(self, start: Incomplete | None = None, stop: Incomplete | None = None, repl: Incomplete | None = None): ...
    def decode(self, encoding, errors: str = 'strict'): ...
    def encode(self, encoding, errors: str = 'strict'): ...
    def strip(self, to_strip: Incomplete | None = None): ...
    def lstrip(self, to_strip: Incomplete | None = None): ...
    def rstrip(self, to_strip: Incomplete | None = None): ...
    def removeprefix(self, prefix: str): ...
    def removesuffix(self, suffix: str): ...
    def wrap(self, width: int, **kwargs): ...
    def get_dummies(self, sep: str = '|'): ...
    def translate(self, table): ...
    def count(self, pat, flags: int = 0): ...
    def startswith(self, pat: str | tuple[str, ...], na: Scalar | None = None) -> Series | Index: ...
    def endswith(self, pat: str | tuple[str, ...], na: Scalar | None = None) -> Series | Index: ...
    def findall(self, pat, flags: int = 0): ...
    def extract(self, pat: str, flags: int = 0, expand: bool = True) -> DataFrame | Series | Index: ...
    def extractall(self, pat, flags: int = 0) -> DataFrame: ...
    def find(self, sub, start: int = 0, end: Incomplete | None = None): ...
    def rfind(self, sub, start: int = 0, end: Incomplete | None = None): ...
    def normalize(self, form): ...
    def index(self, sub, start: int = 0, end: Incomplete | None = None): ...
    def rindex(self, sub, start: int = 0, end: Incomplete | None = None): ...
    def len(self): ...
    def lower(self): ...
    def upper(self): ...
    def title(self): ...
    def capitalize(self): ...
    def swapcase(self): ...
    def casefold(self): ...
    isalnum: Incomplete
    isalpha: Incomplete
    isdigit: Incomplete
    isspace: Incomplete
    islower: Incomplete
    isupper: Incomplete
    istitle: Incomplete
    isnumeric: Incomplete
    isdecimal: Incomplete

def cat_safe(list_of_columns: list[npt.NDArray[np.object_]], sep: str): ...
def cat_core(list_of_columns: list, sep: str): ...
def str_extractall(arr, pat, flags: int = 0) -> DataFrame: ...
