import numpy as np
from _typeshed import Incomplete
from pandas import Categorical as Categorical, Index as Index, Series as Series
from pandas._libs import algos as algos, iNaT as iNaT, lib as lib
from pandas._typing import AnyArrayLike as AnyArrayLike, ArrayLike as ArrayLike, AxisInt as AxisInt, DtypeObj as DtypeObj, ListLike as ListLike, NumpySorter as NumpySorter, NumpyValueArrayLike as NumpyValueArrayLike, TakeIndexer as TakeIndexer, npt as npt
from pandas.core.array_algos.take import take_nd as take_nd
from pandas.core.arrays import BaseMaskedArray as BaseMaskedArray, ExtensionArray as ExtensionArray
from pandas.core.construction import ensure_wrapped_if_datetimelike as ensure_wrapped_if_datetimelike, extract_array as extract_array
from pandas.core.dtypes.cast import construct_1d_object_array_from_listlike as construct_1d_object_array_from_listlike, np_find_common_type as np_find_common_type
from pandas.core.dtypes.common import ensure_float64 as ensure_float64, ensure_object as ensure_object, ensure_platform_int as ensure_platform_int, is_array_like as is_array_like, is_bool_dtype as is_bool_dtype, is_complex_dtype as is_complex_dtype, is_dict_like as is_dict_like, is_extension_array_dtype as is_extension_array_dtype, is_float_dtype as is_float_dtype, is_integer as is_integer, is_integer_dtype as is_integer_dtype, is_list_like as is_list_like, is_object_dtype as is_object_dtype, is_signed_integer_dtype as is_signed_integer_dtype, needs_i8_conversion as needs_i8_conversion
from pandas.core.dtypes.concat import concat_compat as concat_compat
from pandas.core.dtypes.dtypes import BaseMaskedDtype as BaseMaskedDtype, CategoricalDtype as CategoricalDtype, ExtensionDtype as ExtensionDtype, NumpyEADtype as NumpyEADtype
from pandas.core.dtypes.generic import ABCDatetimeArray as ABCDatetimeArray, ABCExtensionArray as ABCExtensionArray, ABCIndex as ABCIndex, ABCMultiIndex as ABCMultiIndex, ABCSeries as ABCSeries, ABCTimedeltaArray as ABCTimedeltaArray
from pandas.core.dtypes.missing import isna as isna, na_value_for_dtype as na_value_for_dtype
from pandas.core.indexers import validate_indices as validate_indices
from pandas.util._decorators import doc as doc
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Literal

def unique(values): ...
def nunique_ints(values: ArrayLike) -> int: ...
def unique_with_mask(values, mask: npt.NDArray[np.bool_] | None = None): ...
unique1d = unique

def isin(comps: ListLike, values: ListLike) -> npt.NDArray[np.bool_]: ...
def factorize_array(values: np.ndarray, use_na_sentinel: bool = True, size_hint: int | None = None, na_value: object = None, mask: npt.NDArray[np.bool_] | None = None) -> tuple[npt.NDArray[np.intp], np.ndarray]: ...
def factorize(values, sort: bool = False, use_na_sentinel: bool = True, size_hint: int | None = None) -> tuple[np.ndarray, np.ndarray | Index]: ...
def value_counts(values, sort: bool = True, ascending: bool = False, normalize: bool = False, bins: Incomplete | None = None, dropna: bool = True) -> Series: ...
def value_counts_internal(values, sort: bool = True, ascending: bool = False, normalize: bool = False, bins: Incomplete | None = None, dropna: bool = True) -> Series: ...
def value_counts_arraylike(values: np.ndarray, dropna: bool, mask: npt.NDArray[np.bool_] | None = None) -> tuple[ArrayLike, npt.NDArray[np.int64], int]: ...
def duplicated(values: ArrayLike, keep: Literal['first', 'last', False] = 'first', mask: npt.NDArray[np.bool_] | None = None) -> npt.NDArray[np.bool_]: ...
def mode(values: ArrayLike, dropna: bool = True, mask: npt.NDArray[np.bool_] | None = None) -> ArrayLike: ...
def rank(values: ArrayLike, axis: AxisInt = 0, method: str = 'average', na_option: str = 'keep', ascending: bool = True, pct: bool = False) -> npt.NDArray[np.float64]: ...
def take(arr, indices: TakeIndexer, axis: AxisInt = 0, allow_fill: bool = False, fill_value: Incomplete | None = None): ...
def searchsorted(arr: ArrayLike, value: NumpyValueArrayLike | ExtensionArray, side: Literal['left', 'right'] = 'left', sorter: NumpySorter | None = None) -> npt.NDArray[np.intp] | np.intp: ...
def diff(arr, n: int, axis: AxisInt = 0): ...
def safe_sort(values: Index | ArrayLike, codes: npt.NDArray[np.intp] | None = None, use_na_sentinel: bool = True, assume_unique: bool = False, verify: bool = True) -> AnyArrayLike | tuple[AnyArrayLike, np.ndarray]: ...
def union_with_duplicates(lvals: ArrayLike | Index, rvals: ArrayLike | Index) -> ArrayLike | Index: ...
def map_array(arr: ArrayLike, mapper, na_action: Literal['ignore'] | None = None, convert: bool = True) -> np.ndarray | ExtensionArray | Index: ...
