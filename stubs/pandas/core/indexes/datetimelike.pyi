import abc
import numpy as np
from _typeshed import Incomplete
from abc import ABC
from pandas import CategoricalIndex as CategoricalIndex
from pandas._config import using_copy_on_write as using_copy_on_write
from pandas._libs import NaT as NaT, Timedelta as Timedelta, lib as lib
from pandas._libs.tslibs import BaseOffset as BaseOffset, Resolution as Resolution, Tick as Tick, parsing as parsing, to_offset as to_offset
from pandas._libs.tslibs.dtypes import freq_to_period_freqstr as freq_to_period_freqstr
from pandas._typing import Axis as Axis, Self as Self, npt as npt
from pandas.core.arrays import DatetimeArray as DatetimeArray, ExtensionArray as ExtensionArray, PeriodArray as PeriodArray, TimedeltaArray as TimedeltaArray
from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin as DatetimeLikeArrayMixin
from pandas.core.dtypes.common import is_integer as is_integer, is_list_like as is_list_like
from pandas.core.dtypes.concat import concat_compat as concat_compat
from pandas.core.dtypes.dtypes import CategoricalDtype as CategoricalDtype
from pandas.core.indexes.base import Index as Index
from pandas.core.indexes.extension import NDArrayBackedExtensionIndex as NDArrayBackedExtensionIndex
from pandas.core.indexes.range import RangeIndex as RangeIndex
from pandas.core.tools.timedeltas import to_timedelta as to_timedelta
from pandas.errors import InvalidIndexError as InvalidIndexError, NullFrequencyError as NullFrequencyError
from pandas.util._decorators import Appender as Appender, cache_readonly as cache_readonly, doc as doc
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Any, Callable

class DatetimeIndexOpsMixin(NDArrayBackedExtensionIndex, ABC, metaclass=abc.ABCMeta):
    def mean(self, *, skipna: bool = True, axis: int | None = 0): ...
    @property
    def freq(self) -> BaseOffset | None: ...
    @freq.setter
    def freq(self, value) -> None: ...
    @property
    def asi8(self) -> npt.NDArray[np.int64]: ...
    @property
    def freqstr(self) -> str: ...
    def resolution(self) -> str: ...
    def hasnans(self) -> bool: ...
    def equals(self, other: Any) -> bool: ...
    def __contains__(self, key: Any) -> bool: ...
    def format(self, name: bool = False, formatter: Callable | None = None, na_rep: str = 'NaT', date_format: str | None = None) -> list[str]: ...
    def shift(self, periods: int = 1, freq: Incomplete | None = None) -> Self: ...

class DatetimeTimedeltaMixin(DatetimeIndexOpsMixin, ABC, metaclass=abc.ABCMeta):
    @property
    def unit(self) -> str: ...
    def as_unit(self, unit: str) -> Self: ...
    @property
    def values(self) -> np.ndarray: ...
    def shift(self, periods: int = 1, freq: Incomplete | None = None) -> Self: ...
    def inferred_freq(self) -> str | None: ...
    def delete(self, loc) -> Self: ...
    def insert(self, loc: int, item): ...
    def take(self, indices, axis: Axis = 0, allow_fill: bool = True, fill_value: Incomplete | None = None, **kwargs) -> Self: ...
