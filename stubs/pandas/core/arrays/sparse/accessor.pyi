from _typeshed import Incomplete
from pandas import DataFrame as DataFrame, Series as Series
from pandas.compat._optional import import_optional_dependency as import_optional_dependency
from pandas.core.accessor import PandasDelegate as PandasDelegate, delegate_names as delegate_names
from pandas.core.arrays.sparse.array import SparseArray as SparseArray
from pandas.core.dtypes.cast import find_common_type as find_common_type
from pandas.core.dtypes.dtypes import SparseDtype as SparseDtype

class BaseAccessor:
    def __init__(self, data: Incomplete | None = None) -> None: ...

class SparseAccessor(BaseAccessor, PandasDelegate):
    @classmethod
    def from_coo(cls, A, dense_index: bool = False) -> Series: ...
    def to_coo(self, row_levels=(0,), column_levels=(1,), sort_labels: bool = False): ...
    def to_dense(self) -> Series: ...

class SparseFrameAccessor(BaseAccessor, PandasDelegate):
    @classmethod
    def from_spmatrix(cls, data, index: Incomplete | None = None, columns: Incomplete | None = None) -> DataFrame: ...
    def to_dense(self) -> DataFrame: ...
    def to_coo(self): ...
    @property
    def density(self) -> float: ...
