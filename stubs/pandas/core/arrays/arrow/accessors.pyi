import pyarrow.compute as pc
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from collections.abc import Iterator
from pandas import DataFrame as DataFrame, Series as Series
from pandas.compat import pa_version_under10p1 as pa_version_under10p1, pa_version_under11p0 as pa_version_under11p0
from pandas.core.dtypes.common import is_list_like as is_list_like
from pandas.core.dtypes.dtypes import ArrowDtype as ArrowDtype

class ArrowAccessor(metaclass=ABCMeta):
    @abstractmethod
    def __init__(self, data, validation_msg: str): ...

class ListAccessor(ArrowAccessor):
    def __init__(self, data: Incomplete | None = None) -> None: ...
    def len(self) -> Series: ...
    def __getitem__(self, key: int | slice) -> Series: ...
    def __iter__(self) -> Iterator: ...
    def flatten(self) -> Series: ...

class StructAccessor(ArrowAccessor):
    def __init__(self, data: Incomplete | None = None) -> None: ...
    @property
    def dtypes(self) -> Series: ...
    def field(self, name_or_index: list[str] | list[bytes] | list[int] | pc.Expression | bytes | str | int) -> Series: ...
    def explode(self) -> DataFrame: ...
