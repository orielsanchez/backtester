import numpy as np
from _typeshed import Incomplete
from pandas import Index as Index
from pandas._libs import lib as lib
from pandas._libs.tslibs import is_supported_dtype as is_supported_dtype
from pandas._typing import AxisInt as AxisInt, Dtype as Dtype, FillnaOptions as FillnaOptions, InterpolateOptions as InterpolateOptions, NpDtype as NpDtype, Scalar as Scalar, Self as Self, npt as npt
from pandas.core import arraylike as arraylike, missing as missing, nanops as nanops, ops as ops
from pandas.core.arraylike import OpsMixin as OpsMixin
from pandas.core.arrays._mixins import NDArrayBackedExtensionArray as NDArrayBackedExtensionArray
from pandas.core.construction import ensure_wrapped_if_datetimelike as ensure_wrapped_if_datetimelike
from pandas.core.dtypes.astype import astype_array as astype_array
from pandas.core.dtypes.cast import construct_1d_object_array_from_listlike as construct_1d_object_array_from_listlike
from pandas.core.dtypes.common import pandas_dtype as pandas_dtype
from pandas.core.dtypes.dtypes import NumpyEADtype as NumpyEADtype
from pandas.core.dtypes.missing import isna as isna
from pandas.core.strings.object_array import ObjectStringArrayMixin as ObjectStringArrayMixin

class NumpyExtensionArray(OpsMixin, NDArrayBackedExtensionArray, ObjectStringArrayMixin):
    __array_priority__: int
    def __init__(self, values: np.ndarray | NumpyExtensionArray, copy: bool = False) -> None: ...
    @property
    def dtype(self) -> NumpyEADtype: ...
    def __array__(self, dtype: NpDtype | None = None, copy: bool | None = None) -> np.ndarray: ...
    def __array_ufunc__(self, ufunc: np.ufunc, method: str, *inputs, **kwargs): ...
    def astype(self, dtype, copy: bool = True): ...
    def isna(self) -> np.ndarray: ...
    def interpolate(self, *, method: InterpolateOptions, axis: int, index: Index, limit, limit_direction, limit_area, copy: bool, **kwargs) -> Self: ...
    def any(self, *, axis: AxisInt | None = None, out: Incomplete | None = None, keepdims: bool = False, skipna: bool = True): ...
    def all(self, *, axis: AxisInt | None = None, out: Incomplete | None = None, keepdims: bool = False, skipna: bool = True): ...
    def min(self, *, axis: AxisInt | None = None, skipna: bool = True, **kwargs) -> Scalar: ...
    def max(self, *, axis: AxisInt | None = None, skipna: bool = True, **kwargs) -> Scalar: ...
    def sum(self, *, axis: AxisInt | None = None, skipna: bool = True, min_count: int = 0, **kwargs) -> Scalar: ...
    def prod(self, *, axis: AxisInt | None = None, skipna: bool = True, min_count: int = 0, **kwargs) -> Scalar: ...
    def mean(self, *, axis: AxisInt | None = None, dtype: NpDtype | None = None, out: Incomplete | None = None, keepdims: bool = False, skipna: bool = True): ...
    def median(self, *, axis: AxisInt | None = None, out: Incomplete | None = None, overwrite_input: bool = False, keepdims: bool = False, skipna: bool = True): ...
    def std(self, *, axis: AxisInt | None = None, dtype: NpDtype | None = None, out: Incomplete | None = None, ddof: int = 1, keepdims: bool = False, skipna: bool = True): ...
    def var(self, *, axis: AxisInt | None = None, dtype: NpDtype | None = None, out: Incomplete | None = None, ddof: int = 1, keepdims: bool = False, skipna: bool = True): ...
    def sem(self, *, axis: AxisInt | None = None, dtype: NpDtype | None = None, out: Incomplete | None = None, ddof: int = 1, keepdims: bool = False, skipna: bool = True): ...
    def kurt(self, *, axis: AxisInt | None = None, dtype: NpDtype | None = None, out: Incomplete | None = None, keepdims: bool = False, skipna: bool = True): ...
    def skew(self, *, axis: AxisInt | None = None, dtype: NpDtype | None = None, out: Incomplete | None = None, keepdims: bool = False, skipna: bool = True): ...
    def to_numpy(self, dtype: npt.DTypeLike | None = None, copy: bool = False, na_value: object = ...) -> np.ndarray: ...
    def __invert__(self) -> NumpyExtensionArray: ...
    def __neg__(self) -> NumpyExtensionArray: ...
    def __pos__(self) -> NumpyExtensionArray: ...
    def __abs__(self) -> NumpyExtensionArray: ...
