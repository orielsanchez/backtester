from . import cache as cache, utils as utils
from .const import USER_AGENTS as USER_AGENTS
from .exceptions import YFRateLimitError as YFRateLimitError
from _typeshed import Incomplete

cache_maxsize: int

def lru_cache_freezeargs(func): ...

class SingletonMeta(type):
    def __call__(cls, *args, **kwargs): ...

class YfData(metaclass=SingletonMeta):
    user_agent_headers: Incomplete
    def __init__(self, session: Incomplete | None = None) -> None: ...
    def get(self, url, user_agent_headers: Incomplete | None = None, params: Incomplete | None = None, proxy: Incomplete | None = None, timeout: int = 30): ...
    def post(self, url, body, user_agent_headers: Incomplete | None = None, params: Incomplete | None = None, proxy: Incomplete | None = None, timeout: int = 30): ...
    def cache_get(self, url, user_agent_headers: Incomplete | None = None, params: Incomplete | None = None, proxy: Incomplete | None = None, timeout: int = 30): ...
    def get_raw_json(self, url, user_agent_headers: Incomplete | None = None, params: Incomplete | None = None, proxy: Incomplete | None = None, timeout: int = 30): ...
