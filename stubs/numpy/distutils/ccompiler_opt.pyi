from _typeshed import Incomplete

class _Config:
    conf_nocache: bool
    conf_noopt: bool
    conf_cache_factors: Incomplete
    conf_tmp_path: Incomplete
    conf_check_path: Incomplete
    conf_target_groups: Incomplete
    conf_c_prefix: str
    conf_c_prefix_: str
    conf_cc_flags: Incomplete
    conf_min_features: Incomplete
    conf_features: Incomplete
    def conf_features_partial(self): ...
    def __init__(self) -> None: ...

class _Distutils:
    def __init__(self, ccompiler) -> None: ...
    def dist_compile(self, sources, flags, ccompiler: Incomplete | None = None, **kwargs): ...
    def dist_test(self, source, flags, macros=[]): ...
    def dist_info(self): ...
    @staticmethod
    def dist_error(*args) -> None: ...
    @staticmethod
    def dist_fatal(*args) -> None: ...
    @staticmethod
    def dist_log(*args, stderr: bool = False) -> None: ...
    @staticmethod
    def dist_load_module(name, path): ...

class _Cache:
    cache_me: Incomplete
    cache_private: Incomplete
    cache_infile: bool
    def __init__(self, cache_path: Incomplete | None = None, *factors) -> None: ...
    def __del__(self) -> None: ...
    def cache_flush(self) -> None: ...
    def cache_hash(self, *factors): ...
    @staticmethod
    def me(cb): ...

class _CCompiler:
    cc_noopt: bool
    cc_is_gcc: bool
    cc_march: str
    cc_name: str
    cc_flags: Incomplete
    cc_is_cached: bool
    def __init__(self) -> None: ...
    def cc_test_flags(self, flags): ...
    def cc_test_cexpr(self, cexpr, flags=[]): ...
    def cc_normalize_flags(self, flags): ...

class _Feature:
    feature_supported: Incomplete
    feature_min: Incomplete
    feature_is_cached: bool
    def __init__(self) -> None: ...
    def feature_names(self, names: Incomplete | None = None, force_flags: Incomplete | None = None, macros=[]): ...
    def feature_is_exist(self, name): ...
    def feature_sorted(self, names, reverse: bool = False): ...
    def feature_implies(self, names, keep_origins: bool = False): ...
    def feature_implies_c(self, names): ...
    def feature_ahead(self, names): ...
    def feature_untied(self, names): ...
    def feature_get_til(self, names, keyisfalse): ...
    def feature_detect(self, names): ...
    def feature_flags(self, names): ...
    def feature_test(self, name, force_flags: Incomplete | None = None, macros=[]): ...
    def feature_is_supported(self, name, force_flags: Incomplete | None = None, macros=[]): ...
    def feature_can_autovec(self, name): ...
    def feature_extra_checks(self, name): ...
    def feature_c_preprocessor(self, feature_name, tabs: int = 0): ...

class _Parse:
    parse_baseline_names: Incomplete
    parse_baseline_flags: Incomplete
    parse_dispatch_names: Incomplete
    parse_target_groups: Incomplete
    parse_is_cached: bool
    def __init__(self, cpu_baseline, cpu_dispatch) -> None: ...
    def parse_targets(self, source): ...

class CCompilerOpt(_Config, _Distutils, _Cache, _CCompiler, _Feature, _Parse):
    sources_status: Incomplete
    hit_cache: Incomplete
    def __init__(self, ccompiler, cpu_baseline: str = 'min', cpu_dispatch: str = 'max', cache_path: Incomplete | None = None) -> None: ...
    def is_cached(self): ...
    def cpu_baseline_flags(self): ...
    def cpu_baseline_names(self): ...
    def cpu_dispatch_names(self): ...
    def try_dispatch(self, sources, src_dir: Incomplete | None = None, ccompiler: Incomplete | None = None, **kwargs): ...
    def generate_dispatch_header(self, header_path) -> None: ...
    def report(self, full: bool = False): ...

def new_ccompiler_opt(compiler, dispatch_hpath, **kwargs): ...
