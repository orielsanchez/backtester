import distutils.cygwinccompiler
from _typeshed import Incomplete
from numpy.distutils import log as log
from numpy.distutils.misc_util import get_build_architecture as get_build_architecture, msvc_runtime_library as msvc_runtime_library, msvc_runtime_major as msvc_runtime_major, msvc_runtime_version as msvc_runtime_version

def get_msvcr_replacement(): ...

class Mingw32CCompiler(distutils.cygwinccompiler.CygwinCCompiler):
    compiler_type: str
    compiler_cxx: Incomplete
    def __init__(self, verbose: int = 0, dry_run: int = 0, force: int = 0) -> None: ...
    def link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols: Incomplete | None = None, debug: int = 0, extra_preargs: Incomplete | None = None, extra_postargs: Incomplete | None = None, build_temp: Incomplete | None = None, target_lang: Incomplete | None = None) -> None: ...
    def object_filenames(self, source_filenames, strip_dir: int = 0, output_dir: str = ''): ...

def find_python_dll(): ...
def dump_table(dll): ...
def generate_def(dll, dfile) -> None: ...
def find_dll(dll_name): ...
def build_msvcr_library(debug: bool = False): ...
def build_import_library(): ...
def msvc_manifest_xml(maj, min): ...
def manifest_rc(name, type: str = 'dll'): ...
def check_embedded_msvcr_match_linked(msver) -> None: ...
def configtest_name(config): ...
def manifest_name(config): ...
def rc_name(config): ...
def generate_manifest(config) -> None: ...
