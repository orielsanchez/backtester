from _typeshed import Incomplete
from numpy.distutils import log as log
from numpy.distutils.exec_command import filepath_from_subprocess_output as filepath_from_subprocess_output, forward_bytes_to_stdout as forward_bytes_to_stdout
from numpy.distutils.misc_util import cyg2win32 as cyg2win32, get_num_build_jobs as get_num_build_jobs, is_sequence as is_sequence, mingw32 as mingw32, sanitize_cxx_flags as sanitize_cxx_flags

def replace_method(klass, method_name, func): ...
def CCompiler_find_executables(self) -> None: ...
def CCompiler_spawn(self, cmd, display: Incomplete | None = None, env: Incomplete | None = None) -> None: ...
def CCompiler_object_filenames(self, source_filenames, strip_dir: int = 0, output_dir: str = ''): ...
def CCompiler_compile(self, sources, output_dir: Incomplete | None = None, macros: Incomplete | None = None, include_dirs: Incomplete | None = None, debug: int = 0, extra_preargs: Incomplete | None = None, extra_postargs: Incomplete | None = None, depends: Incomplete | None = None): ...
def CCompiler_customize_cmd(self, cmd, ignore=()): ...
def CCompiler_show_customization(self) -> None: ...
def CCompiler_customize(self, dist, need_cxx: int = 0) -> None: ...
def simple_version_match(pat: str = '[-.\\d]+', ignore: str = '', start: str = ''): ...
def CCompiler_get_version(self, force: bool = False, ok_status=[0]): ...
def CCompiler_cxx_compiler(self): ...
