from _typeshed import Incomplete

__all__ = ['Configuration', 'get_numpy_include_dirs', 'default_config_dict', 'dict_append', 'appendpath', 'generate_config_py', 'get_cmd', 'allpath', 'get_mathlibs', 'terminal_has_colors', 'red_text', 'green_text', 'yellow_text', 'blue_text', 'cyan_text', 'cyg2win32', 'mingw32', 'all_strings', 'has_f_sources', 'has_cxx_sources', 'filter_sources', 'get_dependencies', 'is_local_src_dir', 'get_ext_source_files', 'get_script_files', 'get_lib_source_files', 'get_data_files', 'dot_join', 'get_frame', 'minrelpath', 'njoin', 'is_sequence', 'is_string', 'as_list', 'gpaths', 'get_language', 'get_build_architecture', 'get_info', 'get_pkg_info', 'get_num_build_jobs', 'sanitize_cxx_flags', 'exec_mod_from_location']

class InstallableLib:
    name: Incomplete
    build_info: Incomplete
    target_dir: Incomplete
    def __init__(self, name, build_info, target_dir) -> None: ...

def get_num_build_jobs(): ...
def allpath(name): ...
def njoin(*path): ...
def get_mathlibs(path: Incomplete | None = None): ...
def minrelpath(path): ...
def gpaths(paths, local_path: str = '', include_non_existing: bool = True): ...
def terminal_has_colors(): ...
def red_text(s): ...
def green_text(s): ...
def yellow_text(s): ...
def cyan_text(s): ...
def blue_text(s): ...
def cyg2win32(path: str) -> str: ...
def mingw32(): ...
def is_string(s): ...
def all_strings(lst): ...
def is_sequence(seq): ...
def as_list(seq): ...
def get_language(sources): ...
def has_f_sources(sources): ...
def has_cxx_sources(sources): ...
def filter_sources(sources): ...
def get_dependencies(sources): ...
def is_local_src_dir(directory): ...
def get_ext_source_files(ext): ...
def get_script_files(scripts): ...
def get_lib_source_files(lib): ...
def get_data_files(data): ...
def dot_join(*args): ...
def get_frame(level: int = 0): ...

class Configuration:
    numpy_include_dirs: Incomplete
    name: Incomplete
    version: Incomplete
    local_path: Incomplete
    top_path: Incomplete
    package_path: Incomplete
    path_in_package: Incomplete
    list_keys: Incomplete
    dict_keys: Incomplete
    extra_keys: Incomplete
    options: Incomplete
    setup_name: Incomplete
    def __init__(self, package_name: Incomplete | None = None, parent_name: Incomplete | None = None, top_path: Incomplete | None = None, package_path: Incomplete | None = None, caller_level: int = 1, setup_name: str = 'setup.py', **attrs) -> None: ...
    def todict(self): ...
    def info(self, message) -> None: ...
    def warn(self, message) -> None: ...
    def set_options(self, **options) -> None: ...
    def get_distribution(self): ...
    def get_subpackage(self, subpackage_name, subpackage_path: Incomplete | None = None, parent_name: Incomplete | None = None, caller_level: int = 1): ...
    def add_subpackage(self, subpackage_name, subpackage_path: Incomplete | None = None, standalone: bool = False) -> None: ...
    def add_data_dir(self, data_path): ...
    def add_data_files(self, *files) -> None: ...
    def add_define_macros(self, macros) -> None: ...
    def add_include_dirs(self, *paths) -> None: ...
    def add_headers(self, *files) -> None: ...
    def paths(self, *paths, **kws): ...
    def add_extension(self, name, sources, **kw): ...
    def add_library(self, name, sources, **build_info) -> None: ...
    def add_installed_library(self, name, sources, install_dir, build_info: Incomplete | None = None) -> None: ...
    def add_npy_pkg_config(self, template, install_dir, subst_dict: Incomplete | None = None) -> None: ...
    def add_scripts(self, *files) -> None: ...
    def dict_append(self, **dict) -> None: ...
    def get_config_cmd(self): ...
    def get_build_temp_dir(self): ...
    def have_f77c(self): ...
    def have_f90c(self): ...
    def append_to(self, extlib) -> None: ...
    def get_version(self, version_file: Incomplete | None = None, version_variable: Incomplete | None = None): ...
    def make_svn_version_py(self, delete: bool = True): ...
    def make_hg_version_py(self, delete: bool = True): ...
    def make_config_py(self, name: str = '__config__') -> None: ...
    def get_info(self, *names): ...

def get_cmd(cmdname, _cache={}): ...
def get_numpy_include_dirs(): ...
def get_pkg_info(pkgname, dirs: Incomplete | None = None): ...
def get_info(pkgname, dirs: Incomplete | None = None): ...
def default_config_dict(name: Incomplete | None = None, parent_name: Incomplete | None = None, local_path: Incomplete | None = None): ...
def dict_append(d, **kws) -> None: ...
def appendpath(prefix, path): ...
def generate_config_py(target): ...
def get_build_architecture(): ...
def sanitize_cxx_flags(cxxflags): ...
def exec_mod_from_location(modname, modfile): ...
