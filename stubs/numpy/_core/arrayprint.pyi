from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['array2string', 'array_str', 'array_repr', 'set_printoptions', 'get_printoptions', 'printoptions', 'format_float_positional', 'format_float_scientific']

def set_printoptions(precision: Incomplete | None = None, threshold: Incomplete | None = None, edgeitems: Incomplete | None = None, linewidth: Incomplete | None = None, suppress: Incomplete | None = None, nanstr: Incomplete | None = None, infstr: Incomplete | None = None, formatter: Incomplete | None = None, sign: Incomplete | None = None, floatmode: Incomplete | None = None, *, legacy: Incomplete | None = None, override_repr: Incomplete | None = None) -> None: ...
def get_printoptions(): ...
def printoptions(*args, **kwargs) -> Generator[Incomplete]: ...
def array2string(a, max_line_width: Incomplete | None = None, precision: Incomplete | None = None, suppress_small: Incomplete | None = None, separator: str = ' ', prefix: str = '', style=..., formatter: Incomplete | None = None, threshold: Incomplete | None = None, edgeitems: Incomplete | None = None, sign: Incomplete | None = None, floatmode: Incomplete | None = None, suffix: str = '', *, legacy: Incomplete | None = None): ...

class FloatingFormat:
    floatmode: Incomplete
    precision: Incomplete
    suppress_small: Incomplete
    sign: Incomplete
    exp_format: bool
    large_exponent: bool
    def __init__(self, data, precision, floatmode, suppress_small, sign: bool = False, *, legacy: Incomplete | None = None) -> None: ...
    pad_left: int
    pad_right: int
    trim: str
    exp_size: int
    unique: bool
    min_digits: Incomplete
    def fillFormat(self, data) -> None: ...
    def __call__(self, x): ...

def format_float_scientific(x, precision: Incomplete | None = None, unique: bool = True, trim: str = 'k', sign: bool = False, pad_left: Incomplete | None = None, exp_digits: Incomplete | None = None, min_digits: Incomplete | None = None): ...
def format_float_positional(x, precision: Incomplete | None = None, unique: bool = True, fractional: bool = True, trim: str = 'k', sign: bool = False, pad_left: Incomplete | None = None, pad_right: Incomplete | None = None, min_digits: Incomplete | None = None): ...

class IntegerFormat:
    format: Incomplete
    def __init__(self, data, sign: str = '-') -> None: ...
    def __call__(self, x): ...

class BoolFormat:
    truestr: Incomplete
    def __init__(self, data, **kwargs) -> None: ...
    def __call__(self, x): ...

class ComplexFloatingFormat:
    real_format: Incomplete
    imag_format: Incomplete
    def __init__(self, x, precision, floatmode, suppress_small, sign: bool = False, *, legacy: Incomplete | None = None) -> None: ...
    def __call__(self, x): ...

class _TimelikeFormat:
    def __init__(self, data) -> None: ...
    def __call__(self, x): ...

class DatetimeFormat(_TimelikeFormat):
    timezone: Incomplete
    unit: Incomplete
    casting: Incomplete
    legacy: Incomplete
    def __init__(self, x, unit: Incomplete | None = None, timezone: Incomplete | None = None, casting: str = 'same_kind', legacy: bool = False) -> None: ...
    def __call__(self, x): ...

class TimedeltaFormat(_TimelikeFormat): ...

class SubArrayFormat:
    format_function: Incomplete
    threshold: Incomplete
    edge_items: Incomplete
    def __init__(self, format_function, **options) -> None: ...
    summary_insert: Incomplete
    def __call__(self, a): ...
    def format_array(self, a): ...

class StructuredVoidFormat:
    format_functions: Incomplete
    def __init__(self, format_functions) -> None: ...
    @classmethod
    def from_data(cls, data, **options): ...
    def __call__(self, x): ...

def array_repr(arr, max_line_width: Incomplete | None = None, precision: Incomplete | None = None, suppress_small: Incomplete | None = None): ...
def array_str(a, max_line_width: Incomplete | None = None, precision: Incomplete | None = None, suppress_small: Incomplete | None = None): ...
