from numpy.strings import *
from .numeric import ndarray
from _typeshed import Incomplete
from numpy._core.multiarray import compare_chararrays as compare_chararrays
from numpy._core.strings import _join as join, _rsplit as rsplit, _split as split, _splitlines as splitlines

__all__ = ['equal', 'not_equal', 'greater_equal', 'less_equal', 'greater', 'less', 'str_len', 'add', 'multiply', 'mod', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill', 'isnumeric', 'isdecimal', 'array', 'asarray', 'compare_chararrays', 'chararray']

def equal(x1, x2): ...
def not_equal(x1, x2): ...
def greater_equal(x1, x2): ...
def less_equal(x1, x2): ...
def greater(x1, x2): ...
def less(x1, x2): ...
def multiply(a, i): ...
def partition(a, sep): ...
def rpartition(a, sep): ...

class chararray(ndarray):
    def __new__(subtype, shape, itemsize: int = 1, unicode: bool = False, buffer: Incomplete | None = None, offset: int = 0, strides: Incomplete | None = None, order: str = 'C'): ...
    def __array_wrap__(self, arr, context: Incomplete | None = None, return_scalar: bool = False): ...
    def __array_finalize__(self, obj) -> None: ...
    def __getitem__(self, obj): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __ge__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __lt__(self, other): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, i): ...
    def __rmul__(self, i): ...
    def __mod__(self, i): ...
    def __rmod__(self, other): ...
    def argsort(self, axis: int = -1, kind: Incomplete | None = None, order: Incomplete | None = None): ...
    def capitalize(self): ...
    def center(self, width, fillchar: str = ' '): ...
    def count(self, sub, start: int = 0, end: Incomplete | None = None): ...
    def decode(self, encoding: Incomplete | None = None, errors: Incomplete | None = None): ...
    def encode(self, encoding: Incomplete | None = None, errors: Incomplete | None = None): ...
    def endswith(self, suffix, start: int = 0, end: Incomplete | None = None): ...
    def expandtabs(self, tabsize: int = 8): ...
    def find(self, sub, start: int = 0, end: Incomplete | None = None): ...
    def index(self, sub, start: int = 0, end: Incomplete | None = None): ...
    def isalnum(self): ...
    def isalpha(self): ...
    def isdigit(self): ...
    def islower(self): ...
    def isspace(self): ...
    def istitle(self): ...
    def isupper(self): ...
    def join(self, seq): ...
    def ljust(self, width, fillchar: str = ' '): ...
    def lower(self): ...
    def lstrip(self, chars: Incomplete | None = None): ...
    def partition(self, sep): ...
    def replace(self, old, new, count: Incomplete | None = None): ...
    def rfind(self, sub, start: int = 0, end: Incomplete | None = None): ...
    def rindex(self, sub, start: int = 0, end: Incomplete | None = None): ...
    def rjust(self, width, fillchar: str = ' '): ...
    def rpartition(self, sep): ...
    def rsplit(self, sep: Incomplete | None = None, maxsplit: Incomplete | None = None): ...
    def rstrip(self, chars: Incomplete | None = None): ...
    def split(self, sep: Incomplete | None = None, maxsplit: Incomplete | None = None): ...
    def splitlines(self, keepends: Incomplete | None = None): ...
    def startswith(self, prefix, start: int = 0, end: Incomplete | None = None): ...
    def strip(self, chars: Incomplete | None = None): ...
    def swapcase(self): ...
    def title(self): ...
    def translate(self, table, deletechars: Incomplete | None = None): ...
    def upper(self): ...
    def zfill(self, width): ...
    def isnumeric(self): ...
    def isdecimal(self): ...

def array(obj, itemsize: Incomplete | None = None, copy: bool = True, unicode: Incomplete | None = None, order: Incomplete | None = None): ...
def asarray(obj, itemsize: Incomplete | None = None, unicode: Incomplete | None = None, order: Incomplete | None = None): ...

# Names in __all__ with no definition:
#   add
#   capitalize
#   center
#   count
#   decode
#   encode
#   endswith
#   expandtabs
#   find
#   index
#   isalnum
#   isalpha
#   isdecimal
#   isdigit
#   islower
#   isnumeric
#   isspace
#   istitle
#   isupper
#   ljust
#   lower
#   lstrip
#   mod
#   replace
#   rfind
#   rindex
#   rjust
#   rstrip
#   startswith
#   str_len
#   strip
#   swapcase
#   title
#   translate
#   upper
#   zfill
