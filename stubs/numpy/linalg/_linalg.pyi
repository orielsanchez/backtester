from _typeshed import Incomplete
from numpy._core import intc
from numpy._typing import NDArray
from typing import Any, NamedTuple

__all__ = ['matrix_power', 'solve', 'tensorsolve', 'tensorinv', 'inv', 'cholesky', 'eigvals', 'eigvalsh', 'pinv', 'slogdet', 'det', 'svd', 'svdvals', 'eig', 'eigh', 'lstsq', 'norm', 'qr', 'cond', 'matrix_rank', 'LinAlgError', 'multi_dot', 'trace', 'diagonal', 'cross', 'outer', 'tensordot', 'matmul', 'matrix_transpose', 'matrix_norm', 'vector_norm', 'vecdot']

class EigResult(NamedTuple):
    eigenvalues: NDArray[Any]
    eigenvectors: NDArray[Any]

class EighResult(NamedTuple):
    eigenvalues: NDArray[Any]
    eigenvectors: NDArray[Any]

class QRResult(NamedTuple):
    Q: NDArray[Any]
    R: NDArray[Any]

class SlogdetResult(NamedTuple):
    sign: NDArray[Any]
    logabsdet: NDArray[Any]

class SVDResult(NamedTuple):
    U: NDArray[Any]
    S: NDArray[Any]
    Vh: NDArray[Any]
fortran_int = intc

class LinAlgError(ValueError): ...

def tensorsolve(a, b, axes: Incomplete | None = None): ...
def solve(a, b): ...
def tensorinv(a, ind: int = 2): ...
def inv(a): ...
def matrix_power(a, n): ...
def cholesky(a, /, *, upper: bool = False): ...
def outer(x1, x2, /): ...
def qr(a, mode: str = 'reduced'): ...
def eigvals(a): ...
def eigvalsh(a, UPLO: str = 'L'): ...
def eig(a): ...
def eigh(a, UPLO: str = 'L'): ...
def svd(a, full_matrices: bool = True, compute_uv: bool = True, hermitian: bool = False): ...
def svdvals(x, /): ...
def cond(x, p: Incomplete | None = None): ...
def matrix_rank(A, tol: Incomplete | None = None, hermitian: bool = False, *, rtol: Incomplete | None = None): ...
def pinv(a, rcond: Incomplete | None = None, hermitian: bool = False, *, rtol=...): ...
def slogdet(a): ...
def det(a): ...
def lstsq(a, b, rcond: Incomplete | None = None): ...
def norm(x, ord: Incomplete | None = None, axis: Incomplete | None = None, keepdims: bool = False): ...
def multi_dot(arrays, *, out: Incomplete | None = None): ...
def diagonal(x, /, *, offset: int = 0): ...
def trace(x, /, *, offset: int = 0, dtype: Incomplete | None = None): ...
def cross(x1, x2, /, *, axis: int = -1): ...
def matmul(x1, x2, /): ...
def tensordot(x1, x2, /, *, axes: int = 2): ...
def matrix_transpose(x, /): ...
def matrix_norm(x, /, *, keepdims: bool = False, ord: str = 'fro'): ...
def vector_norm(x, /, *, axis: Incomplete | None = None, keepdims: bool = False, ord: int = 2): ...
def vecdot(x1, x2, /, *, axis: int = -1): ...
