import numpy._core.numeric as N
from _typeshed import Incomplete

__all__ = ['matrix', 'bmat', 'asmatrix']

def asmatrix(data, dtype: Incomplete | None = None): ...

class matrix(N.ndarray):
    __array_priority__: float
    def __new__(subtype, data, dtype: Incomplete | None = None, copy: bool = True): ...
    shape: Incomplete
    def __array_finalize__(self, obj) -> None: ...
    def __getitem__(self, index): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __imul__(self, other): ...
    def __pow__(self, other): ...
    def __ipow__(self, other): ...
    def __rpow__(self, other): ...
    def tolist(self): ...
    def sum(self, axis: Incomplete | None = None, dtype: Incomplete | None = None, out: Incomplete | None = None): ...
    def squeeze(self, axis: Incomplete | None = None): ...
    def flatten(self, order: str = 'C'): ...
    def mean(self, axis: Incomplete | None = None, dtype: Incomplete | None = None, out: Incomplete | None = None): ...
    def std(self, axis: Incomplete | None = None, dtype: Incomplete | None = None, out: Incomplete | None = None, ddof: int = 0): ...
    def var(self, axis: Incomplete | None = None, dtype: Incomplete | None = None, out: Incomplete | None = None, ddof: int = 0): ...
    def prod(self, axis: Incomplete | None = None, dtype: Incomplete | None = None, out: Incomplete | None = None): ...
    def any(self, axis: Incomplete | None = None, out: Incomplete | None = None): ...
    def all(self, axis: Incomplete | None = None, out: Incomplete | None = None): ...
    def max(self, axis: Incomplete | None = None, out: Incomplete | None = None): ...
    def argmax(self, axis: Incomplete | None = None, out: Incomplete | None = None): ...
    def min(self, axis: Incomplete | None = None, out: Incomplete | None = None): ...
    def argmin(self, axis: Incomplete | None = None, out: Incomplete | None = None): ...
    def ptp(self, axis: Incomplete | None = None, out: Incomplete | None = None): ...
    @property
    def I(self): ...
    @property
    def A(self): ...
    @property
    def A1(self): ...
    def ravel(self, order: str = 'C'): ...
    @property
    def T(self): ...
    @property
    def H(self): ...
    getT: Incomplete
    getA: Incomplete
    getA1: Incomplete
    getH: Incomplete
    getI: Incomplete

def bmat(obj, ldict: Incomplete | None = None, gdict: Incomplete | None = None): ...
