import _abc
import abc
import numpy as np
from _typeshed import Incomplete
from typing import Any, Callable, ClassVar

__test__: dict

class BitGenerator:
    capsule: Incomplete
    cffi: Incomplete
    ctypes: Incomplete
    lock: Incomplete
    seed_seq: Incomplete
    state: Incomplete
    def __init__(self, seed=...) -> Any: ...
    def random_raw(self, size=...) -> Any: ...
    def spawn(self, n_children) -> Any: ...
    def __reduce__(self): ...

class ISeedSequence(abc.ABC):
    _abc_impl: ClassVar[_abc._abc_data] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    def generate_state(self, n_words, dtype=...) -> Any: ...

class ISpawnableSeedSequence(ISeedSequence):
    _abc_impl: ClassVar[_abc._abc_data] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    def spawn(self, n_children) -> Any: ...

class SeedSequence:
    generate_state: ClassVar[Callable] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    entropy: Incomplete
    n_children_spawned: Incomplete
    pool: Incomplete
    pool_size: Incomplete
    spawn_key: Incomplete
    state: Incomplete
    def __init__(self) -> Any: ...
    def spawn(self, n_children) -> Any: ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class SeedlessSeedSequence:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def generate_state(self, *args, **kwargs): ...
    def spawn(self, *args, **kwargs): ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class SeedlessSequence:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
