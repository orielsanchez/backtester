import numpy as np
from numpy.random import beta as beta, binomial as binomial, bytes as bytes, chisquare as chisquare, choice as choice, dirichlet as dirichlet, exponential as exponential, f as f, gamma as gamma, geometric as geometric, get_bit_generator as get_bit_generator, get_state as get_state, gumbel as gumbel, hypergeometric as hypergeometric, laplace as laplace, logistic as logistic, lognormal as lognormal, logseries as logseries, multinomial as multinomial, multivariate_normal as multivariate_normal, negative_binomial as negative_binomial, noncentral_chisquare as noncentral_chisquare, noncentral_f as noncentral_f, normal as normal, pareto as pareto, permutation as permutation, poisson as poisson, power as power, rand as rand, randint as randint, randn as randn, random as random, random_integers as random_integers, random_sample as random_sample, ranf as ranf, rayleigh as rayleigh, sample as sample, seed as seed, set_bit_generator as set_bit_generator, set_state as set_state, shuffle as shuffle, standard_cauchy as standard_cauchy, standard_exponential as standard_exponential, standard_gamma as standard_gamma, standard_normal as standard_normal, standard_t as standard_t, triangular as triangular, uniform as uniform, vonmises as vonmises, wald as wald, weibull as weibull, zipf as zipf
from typing import Any, ClassVar, overload

__test__: dict

class RandomState:
    _poisson_lam_max: ClassVar[float] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, seed=...) -> Any: ...
    def beta(self, a, b, size=...) -> Any: ...
    def binomial(self, n, p, size=...) -> Any: ...
    def bytes(self, length) -> Any: ...
    def chisquare(self, df, size=...) -> Any: ...
    def choice(self, a, size=..., replace=..., p=...) -> Any: ...
    def dirichlet(self, alpha, size=...) -> Any: ...
    @overload
    def exponential(self, scale=..., size=...) -> Any: ...
    @overload
    def exponential(self, scale=..., size=...) -> Any: ...
    def f(self, dfnum, dfden, size=...) -> Any: ...
    @overload
    def gamma(self, shape, scale=..., size=...) -> Any: ...
    @overload
    def gamma(self, shape) -> Any: ...
    @overload
    def geometric(self, p, size=...) -> Any: ...
    @overload
    def geometric(self, p=..., size=...) -> Any: ...
    def get_state(self, legacy=...) -> Any: ...
    def gumbel(self, loc=..., scale=..., size=...) -> Any: ...
    def hypergeometric(self, ngood, nbad, nsample, size=...) -> Any: ...
    def laplace(self, loc=..., scale=..., size=...) -> Any: ...
    def logistic(self, loc=..., scale=..., size=...) -> Any: ...
    def lognormal(self, mean=..., sigma=..., size=...) -> Any: ...
    @overload
    def logseries(self, p, size=...) -> Any: ...
    @overload
    def logseries(self, k, p) -> Any: ...
    def multinomial(self, n, pvals, size=...) -> Any: ...
    def multivariate_normal(self, mean, cov, size=..., check_valid=..., tol=...) -> Any: ...
    def negative_binomial(self, n, p, size=...) -> Any: ...
    def noncentral_chisquare(self, df, nonc, size=...) -> Any: ...
    def noncentral_f(self, dfnum, dfden, nonc, size=...) -> Any: ...
    @overload
    def normal(self, loc=..., scale=..., size=...) -> Any: ...
    @overload
    def normal(self, Gaussian) -> Any: ...
    def pareto(self, a, size=...) -> Any: ...
    @overload
    def permutation(self, x) -> Any: ...
    @overload
    def permutation(self, arr) -> Any: ...
    @overload
    def poisson(self, lam=..., size=...) -> Any: ...
    @overload
    def poisson(self, lam=..., size=...) -> Any: ...
    @overload
    def power(self, a, size=...) -> Any: ...
    @overload
    def power(self, a, samples) -> Any: ...
    def rand(self, *args, **kwargs): ...
    def randint(self, low, high=..., size=..., dtype=...) -> Any: ...
    def randn(self) -> Any: ...
    def random(self, size=...) -> Any: ...
    @overload
    def random_integers(self, low, high=..., size=...) -> Any: ...
    @overload
    def random_integers(self, N) -> Any: ...
    @overload
    def random_sample(self, size=...) -> Any: ...
    @overload
    def random_sample(self) -> Any: ...
    @overload
    def random_sample(self) -> Any: ...
    @overload
    def random_sample(self) -> Any: ...
    def rayleigh(self, scale=..., size=...) -> Any: ...
    def seed(self, seed=...) -> Any: ...
    def set_state(self, state) -> Any: ...
    @overload
    def shuffle(self, x) -> Any: ...
    @overload
    def shuffle(self, arr) -> Any: ...
    @overload
    def shuffle(self, arr) -> Any: ...
    def standard_cauchy(self, size=...) -> Any: ...
    def standard_exponential(self, size=...) -> Any: ...
    def standard_gamma(self, shape, size=...) -> Any: ...
    @overload
    def standard_normal(self, size=...) -> Any: ...
    @overload
    def standard_normal(self, size=...) -> Any: ...
    @overload
    def standard_normal(self) -> Any: ...
    @overload
    def standard_normal(self, size=...) -> Any: ...
    @overload
    def standard_normal(self, size=...) -> Any: ...
    def standard_t(self, df, size=...) -> Any: ...
    def tomaxint(self, size=...) -> Any: ...
    def triangular(self, left, mode, right, size=...) -> Any: ...
    def uniform(self, low=..., high=..., size=...) -> Any: ...
    def vonmises(self, mu, kappa, size=...) -> Any: ...
    def wald(self, mean, scale, size=...) -> Any: ...
    def weibull(self, a, size=...) -> Any: ...
    @overload
    def zipf(self, a, size=...) -> Any: ...
    @overload
    def zipf(self, a, n) -> Any: ...
    def __reduce__(self): ...
