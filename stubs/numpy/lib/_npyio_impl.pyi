from _typeshed import Incomplete
from collections.abc import Mapping
from numpy._core.multiarray import packbits as packbits, unpackbits as unpackbits

__all__ = ['savetxt', 'loadtxt', 'genfromtxt', 'load', 'save', 'savez', 'savez_compressed', 'packbits', 'unpackbits', 'fromregex']

class BagObj:
    def __init__(self, obj) -> None: ...
    def __getattribute__(self, key): ...
    def __dir__(self): ...

class NpzFile(Mapping):
    zip: Incomplete
    fid: Incomplete
    files: Incomplete
    allow_pickle: Incomplete
    max_header_size: Incomplete
    pickle_kwargs: Incomplete
    f: Incomplete
    def __init__(self, fid, own_fid: bool = False, allow_pickle: bool = False, pickle_kwargs: Incomplete | None = None, *, max_header_size=...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __getitem__(self, key): ...
    def __contains__(self, key) -> bool: ...
    def get(self, key, default: Incomplete | None = None, /): ...
    def items(self): ...
    def keys(self): ...
    def values(self): ...

def load(file, mmap_mode: Incomplete | None = None, allow_pickle: bool = False, fix_imports: bool = True, encoding: str = 'ASCII', *, max_header_size=...): ...
def save(file, arr, allow_pickle: bool = True, fix_imports=...) -> None: ...
def savez(file, *args, allow_pickle: bool = True, **kwds) -> None: ...
def savez_compressed(file, *args, allow_pickle: bool = True, **kwds) -> None: ...
def loadtxt(fname, dtype=..., comments: str = '#', delimiter: Incomplete | None = None, converters: Incomplete | None = None, skiprows: int = 0, usecols: Incomplete | None = None, unpack: bool = False, ndmin: int = 0, encoding: Incomplete | None = None, max_rows: Incomplete | None = None, *, quotechar: Incomplete | None = None, like: Incomplete | None = None): ...
def savetxt(fname, X, fmt: str = '%.18e', delimiter: str = ' ', newline: str = '\n', header: str = '', footer: str = '', comments: str = '# ', encoding: Incomplete | None = None) -> None: ...
def fromregex(file, regexp, dtype, encoding: Incomplete | None = None): ...
def genfromtxt(fname, dtype=..., comments: str = '#', delimiter: Incomplete | None = None, skip_header: int = 0, skip_footer: int = 0, converters: Incomplete | None = None, missing_values: Incomplete | None = None, filling_values: Incomplete | None = None, usecols: Incomplete | None = None, names: Incomplete | None = None, excludelist: Incomplete | None = None, deletechars=..., replace_space: str = '_', autostrip: bool = False, case_sensitive: bool = True, defaultfmt: str = 'f%i', unpack: Incomplete | None = None, usemask: bool = False, loose: bool = True, invalid_raise: bool = True, max_rows: Incomplete | None = None, encoding: Incomplete | None = None, *, ndmin: int = 0, like: Incomplete | None = None): ...
