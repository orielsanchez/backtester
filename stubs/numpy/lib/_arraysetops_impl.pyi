import numpy as np
from _typeshed import Incomplete
from typing import NamedTuple

__all__ = ['ediff1d', 'in1d', 'intersect1d', 'isin', 'setdiff1d', 'setxor1d', 'union1d', 'unique', 'unique_all', 'unique_counts', 'unique_inverse', 'unique_values']

def ediff1d(ary, to_end: Incomplete | None = None, to_begin: Incomplete | None = None): ...
def unique(ar, return_index: bool = False, return_inverse: bool = False, return_counts: bool = False, axis: Incomplete | None = None, *, equal_nan: bool = True): ...

class UniqueAllResult(NamedTuple):
    values: np.ndarray
    indices: np.ndarray
    inverse_indices: np.ndarray
    counts: np.ndarray

class UniqueCountsResult(NamedTuple):
    values: np.ndarray
    counts: np.ndarray

class UniqueInverseResult(NamedTuple):
    values: np.ndarray
    inverse_indices: np.ndarray

def unique_all(x): ...
def unique_counts(x): ...
def unique_inverse(x): ...
def unique_values(x): ...
def intersect1d(ar1, ar2, assume_unique: bool = False, return_indices: bool = False): ...
def setxor1d(ar1, ar2, assume_unique: bool = False): ...
def in1d(ar1, ar2, assume_unique: bool = False, invert: bool = False, *, kind: Incomplete | None = None): ...
def isin(element, test_elements, assume_unique: bool = False, invert: bool = False, *, kind: Incomplete | None = None): ...
def union1d(ar1, ar2): ...
def setdiff1d(ar1, ar2, assume_unique: bool = False): ...
