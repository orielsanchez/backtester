from _typeshed import Incomplete
from numpy.lib._utils_impl import drop_metadata as drop_metadata

EXPECTED_KEYS: Incomplete
MAGIC_PREFIX: bytes
MAGIC_LEN: Incomplete
ARRAY_ALIGN: int
BUFFER_SIZE: Incomplete
GROWTH_AXIS_MAX_DIGITS: int

def magic(major, minor): ...
def read_magic(fp): ...
def dtype_to_descr(dtype): ...
def descr_to_dtype(descr): ...
def header_data_from_array_1_0(array): ...
def write_array_header_1_0(fp, d) -> None: ...
def write_array_header_2_0(fp, d) -> None: ...
def read_array_header_1_0(fp, max_header_size=...): ...
def read_array_header_2_0(fp, max_header_size=...): ...
def write_array(fp, array, version: Incomplete | None = None, allow_pickle: bool = True, pickle_kwargs: Incomplete | None = None) -> None: ...
def read_array(fp, allow_pickle: bool = False, pickle_kwargs: Incomplete | None = None, *, max_header_size=...): ...
def open_memmap(filename, mode: str = 'r+', dtype: Incomplete | None = None, shape: Incomplete | None = None, fortran_order: bool = False, version: Incomplete | None = None, *, max_header_size=...): ...
def isfileobj(f): ...
