from _typeshed import Incomplete

__all__ = ['poly', 'roots', 'polyint', 'polyder', 'polyadd', 'polysub', 'polymul', 'polydiv', 'polyval', 'poly1d', 'polyfit']

def poly(seq_of_zeros): ...
def roots(p): ...
def polyint(p, m: int = 1, k: Incomplete | None = None): ...
def polyder(p, m: int = 1): ...
def polyfit(x, y, deg, rcond: Incomplete | None = None, full: bool = False, w: Incomplete | None = None, cov: bool = False): ...
def polyval(p, x): ...
def polyadd(a1, a2): ...
def polysub(a1, a2): ...
def polymul(a1, a2): ...
def polydiv(u, v): ...

class poly1d:
    __hash__: Incomplete
    @property
    def coeffs(self): ...
    @coeffs.setter
    def coeffs(self, value) -> None: ...
    @property
    def variable(self): ...
    @property
    def order(self): ...
    @property
    def roots(self): ...
    r = roots
    c = coeffs
    coef = coeffs
    coefficients = coeffs
    o = order
    def __init__(self, c_or_r, r: bool = False, variable: Incomplete | None = None) -> None: ...
    def __array__(self, t: Incomplete | None = None, copy: Incomplete | None = None): ...
    def __len__(self) -> int: ...
    def __call__(self, val): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __pow__(self, val): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __div__(self, other): ...
    __truediv__ = __div__
    def __rdiv__(self, other): ...
    __rtruediv__ = __rdiv__
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __getitem__(self, val): ...
    def __setitem__(self, key, val) -> None: ...
    def __iter__(self): ...
    def integ(self, m: int = 1, k: int = 0): ...
    def deriv(self, m: int = 1): ...
