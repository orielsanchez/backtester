from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['Arrayterator']

class Arrayterator:
    __module__: str
    var: Incomplete
    buf_size: Incomplete
    start: Incomplete
    stop: Incomplete
    step: Incomplete
    def __init__(self, var, buf_size: Incomplete | None = None) -> None: ...
    def __getattr__(self, attr): ...
    def __getitem__(self, index): ...
    def __array__(self, dtype: Incomplete | None = None, copy: Incomplete | None = None): ...
    @property
    def flat(self) -> Generator[Incomplete, Incomplete]: ...
    @property
    def shape(self): ...
    def __iter__(self): ...
