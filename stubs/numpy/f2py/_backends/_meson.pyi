from ._backend import Backend as Backend
from _typeshed import Incomplete
from pathlib import Path

class MesonTemplate:
    modulename: Incomplete
    build_template_path: Incomplete
    sources: Incomplete
    deps: Incomplete
    libraries: Incomplete
    library_dirs: Incomplete
    include_dirs: Incomplete
    substitutions: Incomplete
    objects: Incomplete
    fortran_args: Incomplete
    pipeline: Incomplete
    build_type: Incomplete
    python_exe: Incomplete
    indent: Incomplete
    def __init__(self, modulename: str, sources: list[Path], deps: list[str], libraries: list[str], library_dirs: list[Path], include_dirs: list[Path], object_files: list[Path], linker_args: list[str], fortran_args: list[str], build_type: str, python_exe: str) -> None: ...
    def meson_build_template(self) -> str: ...
    def initialize_template(self) -> None: ...
    def sources_substitution(self) -> None: ...
    def deps_substitution(self) -> None: ...
    def libraries_substitution(self) -> None: ...
    def include_substitution(self) -> None: ...
    def fortran_args_substitution(self) -> None: ...
    def generate_meson_build(self): ...

class MesonBackend(Backend):
    dependencies: Incomplete
    meson_build_dir: str
    build_type: Incomplete
    fc_flags: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def write_meson_build(self, build_dir: Path) -> None: ...
    def run_meson(self, build_dir: Path): ...
    sources: Incomplete
    def compile(self) -> None: ...
