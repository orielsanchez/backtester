from . import polyutils as pu
from ._polybase import ABCPolyBase
from _typeshed import Incomplete

__all__ = ['hermezero', 'hermeone', 'hermex', 'hermedomain', 'hermeline', 'hermeadd', 'hermesub', 'hermemulx', 'hermemul', 'hermediv', 'hermepow', 'hermeval', 'hermeder', 'hermeint', 'herme2poly', 'poly2herme', 'hermefromroots', 'hermevander', 'hermefit', 'hermetrim', 'hermeroots', 'HermiteE', 'hermeval2d', 'hermeval3d', 'hermegrid2d', 'hermegrid3d', 'hermevander2d', 'hermevander3d', 'hermecompanion', 'hermegauss', 'hermeweight']

hermetrim = pu.trimcoef

def poly2herme(pol): ...
def herme2poly(c): ...

hermedomain: Incomplete
hermezero: Incomplete
hermeone: Incomplete
hermex: Incomplete

def hermeline(off, scl): ...
def hermefromroots(roots): ...
def hermeadd(c1, c2): ...
def hermesub(c1, c2): ...
def hermemulx(c): ...
def hermemul(c1, c2): ...
def hermediv(c1, c2): ...
def hermepow(c, pow, maxpower: int = 16): ...
def hermeder(c, m: int = 1, scl: int = 1, axis: int = 0): ...
def hermeint(c, m: int = 1, k=[], lbnd: int = 0, scl: int = 1, axis: int = 0): ...
def hermeval(x, c, tensor: bool = True): ...
def hermeval2d(x, y, c): ...
def hermegrid2d(x, y, c): ...
def hermeval3d(x, y, z, c): ...
def hermegrid3d(x, y, z, c): ...
def hermevander(x, deg): ...
def hermevander2d(x, y, deg): ...
def hermevander3d(x, y, z, deg): ...
def hermefit(x, y, deg, rcond: Incomplete | None = None, full: bool = False, w: Incomplete | None = None): ...
def hermecompanion(c): ...
def hermeroots(c): ...
def hermegauss(deg): ...
def hermeweight(x): ...

class HermiteE(ABCPolyBase):
    domain: Incomplete
    window: Incomplete
    basis_name: str
