from . import polyutils as pu
from ._polybase import ABCPolyBase
from _typeshed import Incomplete

__all__ = ['hermzero', 'hermone', 'hermx', 'hermdomain', 'hermline', 'hermadd', 'hermsub', 'hermmulx', 'hermmul', 'hermdiv', 'hermpow', 'hermval', 'hermder', 'hermint', 'herm2poly', 'poly2herm', 'hermfromroots', 'hermvander', 'hermfit', 'hermtrim', 'hermroots', 'Hermite', 'hermval2d', 'hermval3d', 'hermgrid2d', 'hermgrid3d', 'hermvander2d', 'hermvander3d', 'hermcompanion', 'hermgauss', 'hermweight']

hermtrim = pu.trimcoef

def poly2herm(pol): ...
def herm2poly(c): ...

hermdomain: Incomplete
hermzero: Incomplete
hermone: Incomplete
hermx: Incomplete

def hermline(off, scl): ...
def hermfromroots(roots): ...
def hermadd(c1, c2): ...
def hermsub(c1, c2): ...
def hermmulx(c): ...
def hermmul(c1, c2): ...
def hermdiv(c1, c2): ...
def hermpow(c, pow, maxpower: int = 16): ...
def hermder(c, m: int = 1, scl: int = 1, axis: int = 0): ...
def hermint(c, m: int = 1, k=[], lbnd: int = 0, scl: int = 1, axis: int = 0): ...
def hermval(x, c, tensor: bool = True): ...
def hermval2d(x, y, c): ...
def hermgrid2d(x, y, c): ...
def hermval3d(x, y, z, c): ...
def hermgrid3d(x, y, z, c): ...
def hermvander(x, deg): ...
def hermvander2d(x, y, deg): ...
def hermvander3d(x, y, z, deg): ...
def hermfit(x, y, deg, rcond: Incomplete | None = None, full: bool = False, w: Incomplete | None = None): ...
def hermcompanion(c): ...
def hermroots(c): ...
def hermgauss(deg): ...
def hermweight(x): ...

class Hermite(ABCPolyBase):
    domain: Incomplete
    window: Incomplete
    basis_name: str
