from . import polyutils as pu
from ._polybase import ABCPolyBase
from _typeshed import Incomplete

__all__ = ['chebzero', 'chebone', 'chebx', 'chebdomain', 'chebline', 'chebadd', 'chebsub', 'chebmulx', 'chebmul', 'chebdiv', 'chebpow', 'chebval', 'chebder', 'chebint', 'cheb2poly', 'poly2cheb', 'chebfromroots', 'chebvander', 'chebfit', 'chebtrim', 'chebroots', 'chebpts1', 'chebpts2', 'Chebyshev', 'chebval2d', 'chebval3d', 'chebgrid2d', 'chebgrid3d', 'chebvander2d', 'chebvander3d', 'chebcompanion', 'chebgauss', 'chebweight', 'chebinterpolate']

chebtrim = pu.trimcoef

def poly2cheb(pol): ...
def cheb2poly(c): ...

chebdomain: Incomplete
chebzero: Incomplete
chebone: Incomplete
chebx: Incomplete

def chebline(off, scl): ...
def chebfromroots(roots): ...
def chebadd(c1, c2): ...
def chebsub(c1, c2): ...
def chebmulx(c): ...
def chebmul(c1, c2): ...
def chebdiv(c1, c2): ...
def chebpow(c, pow, maxpower: int = 16): ...
def chebder(c, m: int = 1, scl: int = 1, axis: int = 0): ...
def chebint(c, m: int = 1, k=[], lbnd: int = 0, scl: int = 1, axis: int = 0): ...
def chebval(x, c, tensor: bool = True): ...
def chebval2d(x, y, c): ...
def chebgrid2d(x, y, c): ...
def chebval3d(x, y, z, c): ...
def chebgrid3d(x, y, z, c): ...
def chebvander(x, deg): ...
def chebvander2d(x, y, deg): ...
def chebvander3d(x, y, z, deg): ...
def chebfit(x, y, deg, rcond: Incomplete | None = None, full: bool = False, w: Incomplete | None = None): ...
def chebcompanion(c): ...
def chebroots(c): ...
def chebinterpolate(func, deg, args=()): ...
def chebgauss(deg): ...
def chebweight(x): ...
def chebpts1(npts): ...
def chebpts2(npts): ...

class Chebyshev(ABCPolyBase):
    @classmethod
    def interpolate(cls, func, deg, domain: Incomplete | None = None, args=()): ...
    domain: Incomplete
    window: Incomplete
    basis_name: str
